AWSTemplateFormatVersion: "2010-09-09"
Description: 'Creates three EC2 instances spread across separate Availability Zones.
The instances are bootstrapped to download, install, and configure Unbound for use as
a DNS proxy/forwarding service. This template also creates a static-IP ENI for each instance
which will be attached at boot time by the instance itself.'

Mappings:
  mRegionMap:
    us-east-1:
      "AMIDNSPROXY": "ami-1853ac65"  # Default Amazon Linux AMI 2017.09.1 (HVM), SSD Volume Type
    us-west-2:
      "AMIDNSPROXY": "ami-d874e0a0"  # Default Amazon Linux AMI 2017.09.1 (HVM), SSD Volume Type

Parameters:
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: VpcId of the existing Virtual Private Cloud (VPC)
  EnvName:
    Type: String
    Description: 'Environment Name e.g. lab, dev, qa, prod'
  AppName:
    Type: String
    Description: 'The Name of the Application'
  HostedZoneName:
    Type: String
    Description: Enter the name of the Route 53 private hosted zone.
  OnPremDomain:
    Type: String
    Default: swacorp.com
    Description: Enter the name of the on-premises domain.
  OnPremDns1:
    Type: String
    Default: 172.31.10.11
    MinLength: 7
    MaxLength: 15
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})'
    ConstraintDescription: Must be a valid IP address of the form x.x.x.x.
    Description: Enter the IP address of a primary on-premises DNS resolver (name server).
  OnPremDns2:
    Type: String
    Default: 172.31.10.10
    MinLength: 7
    MaxLength: 15
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})'
    ConstraintDescription: Must be a valid IP address of the form x.x.x.x.
    Description: Enter the IP address of a secondary on-premises DNS resolver (name server).
  SubnetIdAz1:
    Type: String
    Description: Id of the subnet to launch the DNS instance in AZ 1
    AllowedPattern: '(subnet-[a-f0-9]{17})|(subnet-[a-f0-9]{8})' # allow 8 for legacy AWS subnets
    ConstraintDescription: 'Must be in the format subnet-xxxxxxxx...'
  SubnetIdAz2:
    Type: String
    Description: Id of the subnet to launch the DNS instance in AZ 2
    AllowedPattern: '(subnet-[a-f0-9]{17})|(subnet-[a-f0-9]{8})' # allow 8 for legacy AWS subnets
    ConstraintDescription: 'Must be in the format subnet-xxxxxxxx...'
  SubnetIdAz3:
    Type: String
    Description: Id of the subnet to launch the DNS instance in AZ 3
    AllowedPattern: '(subnet-[a-f0-9]{17})|(subnet-[a-f0-9]{8})' # allow 8 for legacy AWS subnets
    ConstraintDescription: 'Must be in the format subnet-xxxxxxxx...'
  DnsProxyIpAz1:
    Type: String
    AllowedPattern: '|(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})'
    ConstraintDescription: Must be a valid IP address of the form x.x.x.x.
    Description: Enter a static IP from the AZ 1 subnet to use when launching the DNS instance.
  DnsProxyIpAz2:
    Type: String
    AllowedPattern: '|(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})'
    ConstraintDescription: Must be a valid IP address of the form x.x.x.x.
    Description: Enter a static IP from the AZ 2 subnet to use when launching the DNS instance.
  DnsProxyIpAz3:
    Type: String
    AllowedPattern: '|(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})'
    ConstraintDescription: Must be a valid IP address of the form x.x.x.x.
    Description: Enter a static IP from the AZ 3 subnet to use when launching the DNS instance.
  InstanceType:
    Type: String
    Description: Instance class used for DNS servers
    Default: t2.micro
    AllowedValues:
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
      - t2.xlarge
      - m4.large
      - m4.xlarge
  Ec2KeyPairName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Enter the key-pair name by which you will access these instances.
  DnsInstanceVolumeSize:
    Type: String
    Default: 10
    Description: Enter the disk volume size (in GB) for the DNS proxy instances.
  SWACostCenter:
    Type: String
    Description: 'Cost Center Number (5 digits)'
    AllowedPattern: '(\d{5})'
    ConstraintDescription: 'Must be in the format XXXXX (5 digits)'
  SWAPID:
    Type: String
    Description: 'IT-XXXXX... or IO-XXXXX... (minimum 5 digits)'
    AllowedPattern: '(IT-\d{5,})|(IO-\d{5,})'
    ConstraintDescription: 'Must be in the format IT-XXXXX... or IO-XXXXX... (minimum 5 digits)'
  SWAConfidentiality:
    Type: String
    Description: 'SWA Public, SWA Internal, SWA Confidential'
    AllowedValues:
      - SWA Public
      - SWA Internal
      - SWA Confidential
  SWACompliance:
    Type: String
    Description: 'PCI, PII, NA'
    AllowedValues:
      - NA
      - PII
      - PCI
  SWABusinessService:
    Type: String
    Description: 'Booking, CheckIn, Manage irregular operations'

Resources:
  # Create a DHCP Options Set.
  rVpcDhcpOptions:
    Type: "AWS::EC2::DHCPOptions"
    Properties:
      DomainName: !Ref HostedZoneName
      DomainNameServers:
        # preserve order of DNS servers - see https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-dhcp-options.html#cfn-ec2-dhcpoptions-domainnameservers
        - !Sub "${DnsProxyIpAz1}, ${DnsProxyIpAz2}, ${DnsProxyIpAz3}"
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref AppName, !Ref EnvName, !Ref 'AWS::Region', 'dhcp-options-set']]
        - Key: SWA:Name
          Value: !Join ['-', [!Ref AppName, !Ref EnvName, !Ref 'AWS::Region', 'dhcp-options-set']]
        - Key: SWA:CostCenter
          Value: !Ref SWACostCenter
        - Key: SWA:PID
          Value: !Ref SWAPID
        - Key: SWA:Confidentiality
          Value: !Ref SWAConfidentiality
        - Key: SWA:Compliance
          Value: !Ref SWACompliance
        - Key: SWA:BusinessService
          Value: !Ref SWABusinessService
        - Key: SWA:Environment
          Value: !Ref EnvName

  # Associate the DHCP Options Set with the VPC in the VPC stack.
  # (this references the output of the VPC stack).
  rVpcDhcpOptionsAssociation:
    Type: "AWS::EC2::VPCDHCPOptionsAssociation"
    Properties:
      DhcpOptionsId: !Ref rVpcDhcpOptions
      VpcId: !Ref VpcId
    DependsOn: 
      - rVpcDhcpOptions
      - rAsgDnsProxyAz3

  ## Auto Scaling Group for DNS servers
  # AZ1 ASG
  rAsgDnsProxyAz1:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn: rEni1Az1
    Properties:
      LaunchConfigurationName: !Ref rLaunchConfigDnsProxyAz1
      MinSize: 1
      MaxSize: 1
      MetricsCollection:
        -
          Granularity: "1Minute"
      VPCZoneIdentifier:
        - !Ref SubnetIdAz1
      ServiceLinkedRoleARN: !Sub 'arn:aws:iam::${AWS::AccountId}:role/aws-service-role/autoscaling.amazonaws.com/AWSServiceRoleForAutoScaling'
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref AppName, !Ref EnvName, 'dns', !Select ['0', !GetAZs ''], 'dns-proxy-az1']]
          PropagateAtLaunch: true
        - Key: SWA:Name
          Value: !Join ['-', [!Ref AppName, !Ref EnvName, 'dns', !Select ['0', !GetAZs ''], 'dns-proxy-az1']]
          PropagateAtLaunch: true
        - Key: SWA:CostCenter
          Value: !Ref SWACostCenter
          PropagateAtLaunch: true
        - Key: SWA:PID
          Value: !Ref SWAPID
          PropagateAtLaunch: true
        - Key: SWA:Confidentiality
          Value: !Ref SWAConfidentiality
          PropagateAtLaunch: true
        - Key: SWA:Compliance
          Value: !Ref SWACompliance
          PropagateAtLaunch: true
        - Key: SWA:BusinessService
          Value: !Ref SWABusinessService
          PropagateAtLaunch: true
        - Key: SWA:Environment
          Value: !Ref EnvName
          PropagateAtLaunch: true
    CreationPolicy:
      ResourceSignal:
        Count: '1'
        Timeout: PT5M

  # AZ2 ASG
  rAsgDnsProxyAz2:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn: 
      - rEni1Az2
      - rAsgDnsProxyAz1
    Properties:
      LaunchConfigurationName: !Ref rLaunchConfigDnsProxyAz2
      MinSize: 1
      MaxSize: 1
      MetricsCollection:
        -
          Granularity: "1Minute"
      VPCZoneIdentifier:
        - !Ref SubnetIdAz2
      ServiceLinkedRoleARN: !Sub 'arn:aws:iam::${AWS::AccountId}:role/aws-service-role/autoscaling.amazonaws.com/AWSServiceRoleForAutoScaling'
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref AppName, !Ref EnvName, 'dns', !Select ['1', !GetAZs ''], 'dns-proxy-az2']]
          PropagateAtLaunch: true
        - Key: SWA:Name
          Value: !Join ['-', [!Ref AppName, !Ref EnvName, 'dns', !Select ['1', !GetAZs ''], 'dns-proxy-az2']]
          PropagateAtLaunch: true
        - Key: SWA:CostCenter
          Value: !Ref SWACostCenter
          PropagateAtLaunch: true
        - Key: SWA:PID
          Value: !Ref SWAPID
          PropagateAtLaunch: true
        - Key: SWA:Confidentiality
          Value: !Ref SWAConfidentiality
          PropagateAtLaunch: true
        - Key: SWA:Compliance
          Value: !Ref SWACompliance
          PropagateAtLaunch: true
        - Key: SWA:BusinessService
          Value: !Ref SWABusinessService
          PropagateAtLaunch: true
        - Key: SWA:Environment
          Value: !Ref EnvName
          PropagateAtLaunch: true
    CreationPolicy:
      ResourceSignal:
        Count: '1'
        Timeout: PT5M

  # AZ3 ASG
  rAsgDnsProxyAz3:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn: 
      - rEni1Az3
      - rAsgDnsProxyAz2
    Properties:
      LaunchConfigurationName: !Ref rLaunchConfigDnsProxyAz3
      MinSize: 1
      MaxSize: 1
      MetricsCollection:
        -
          Granularity: "1Minute"
      VPCZoneIdentifier:
        - !Ref SubnetIdAz3
      ServiceLinkedRoleARN: !Sub 'arn:aws:iam::${AWS::AccountId}:role/aws-service-role/autoscaling.amazonaws.com/AWSServiceRoleForAutoScaling'
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref AppName, !Ref EnvName, 'dns', !Select ['2', !GetAZs ''], 'dns-proxy-az3']]
          PropagateAtLaunch: true
        - Key: SWA:Name
          Value: !Join ['-', [!Ref AppName, !Ref EnvName, 'dns', !Select ['2', !GetAZs ''], 'dns-proxy-az3']]
          PropagateAtLaunch: true
        - Key: SWA:CostCenter
          Value: !Ref SWACostCenter
          PropagateAtLaunch: true
        - Key: SWA:PID
          Value: !Ref SWAPID
          PropagateAtLaunch: true
        - Key: SWA:Confidentiality
          Value: !Ref SWAConfidentiality
          PropagateAtLaunch: true
        - Key: SWA:Compliance
          Value: !Ref SWACompliance
          PropagateAtLaunch: true
        - Key: SWA:BusinessService
          Value: !Ref SWABusinessService
          PropagateAtLaunch: true
        - Key: SWA:Environment
          Value: !Ref EnvName
          PropagateAtLaunch: true
    CreationPolicy:
      ResourceSignal:
        Count: '1'
        Timeout: PT5M

  ## ASG Launch Configurations for DNS servers
  # Launch Config for AZ1
  rLaunchConfigDnsProxyAz1:
    Type: AWS::AutoScaling::LaunchConfiguration
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          InstallAndRun:
            - install_cfn
            - install_app
        install_cfn:
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
              mode: '000400'
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.rLaunchConfigDnsProxy.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource rLaunchConfigDnsProxy --configsets InstallAndRun --region ${AWS::Region}
                runas=root
          services:
            sysvinit:
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'false'
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf
        install_app:
          packages:
            yum:
              gcc: []
              openssl-devel: []
              expat-devel: []
              unbound: []
          users:
            unbound:
              groups:
                - "unbound"
          files:
            /etc/unbound/unbound.conf:
              content: !Sub |
                server:
                    interface: 0.0.0.0
                    interface-automatic: yes
                    access-control: 10.0.0.0/8 allow_snoop
                    access-control: 172.16.0.0/12 allow_snoop
                    access-control: 192.168.0.0/16 allow_snoop
                    access-control: 127.0.0.0/8 allow_snoop
                    root-hints: "/etc/unbound/root.hints"
                    local-zone: "10.in-addr.arpa." nodefault
                    local-zone: "17.172.in-addr.arpa." nodefault
                    local-zone: "168.192.in-addr.arpa." nodefault
                forward-zone:
                    name: ${HostedZoneName}
                    forward-addr: @@vpc_dns@@
                forward-zone:
                    name: ${OnPremDomain}
                    forward-addr: ${OnPremDns1}
                    forward-addr: ${OnPremDns2}
                forward-zone:
                    name: "."
                    forward-addr: @@vpc_dns@@
            /etc/init/unbound.conf:
              content: !Sub |
                start on runlevel [2345]
                exec /usr/sbin/unbound
          commands:
            01_pull_root_hints:
              command: !Sub
                curl -o /etc/unbound/root.hints https://www.internic.net/domain/named.cache
          services:
            sysvinit:
              unbound:
                enabled: 'true'
                ensureRunning: 'false' # We start this manually after sed runs in user data.
    Properties:
      BlockDeviceMappings:
        - DeviceName: "/dev/sdd"
          Ebs:
            DeleteOnTermination: true
            Encrypted: true
            VolumeSize: !Ref DnsInstanceVolumeSize
            VolumeType: gp2
      IamInstanceProfile: !Ref rProfileDnsServer
      ImageId: !FindInMap
        - mRegionMap
        - !Ref AWS::Region
        - AMIDNSPROXY
      InstanceType: !Ref InstanceType
      KeyName: !Ref Ec2KeyPairName
      SecurityGroups:
        - !Ref rDnsInstanceSg
      UserData:
        'Fn::Base64': !Sub |
          #!/bin/bash -xe
          # Set all the environment variables.
          id=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)
          mac=$(curl -s http://169.254.169.254/latest/meta-data/network/interfaces/macs/ | cut -d/ -f1 | awk '{print $1;exit}')
          subnet_id=$(curl -s http://169.254.169.254/latest/meta-data/network/interfaces/macs/$mac/subnet-id)
          vpc_cidr=$(curl -s http://169.254.169.254/latest/meta-data/network/interfaces/macs/$mac/vpc-ipv4-cidr-block)
          network=$(echo $vpc_cidr | cut -d '/' -f 1)
          vpc_dns=$(echo $network | awk -F. '{printf "%d.%d.%d.%d", $1,$2,$3,$4+2}')
          # Supersede DHCP-assigned name servers with the +2 resolver for now.
          echo 'supersede domain-name-servers '$vpc_dns';' >> /etc/dhcp/dhclient.conf
          # Lower DHCP timeout since we are statically assigning name servers.
          sed -i "/timeout 300;/d" /etc/dhcp/dhclient.conf #delete old timeout value.
          echo 'timeout 1;' >> /etc/dhcp/dhclient.conf #add new timeout value.
          # Refresh dhcp.
          dhclient -r && dhclient
          # Now that we have a working name server, run yum update.
          yum update -y
          # Run cfn-init helper script.
          /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource rLaunchConfigDnsProxyAz1 --configsets InstallAndRun --region ${AWS::Region}
          # Set proper +2 resolver value in unbound.conf.
          sed -i -e "s/@@vpc_dns@@/$vpc_dns/g" /etc/unbound/unbound.conf
          # Set the AWS default region.
          export AWS_DEFAULT_REGION=${AWS::Region}
          # Find ENI in our subnet. This spits out both the attachment id (or None) and the ENI ID.
          eni_info=$(aws ec2 describe-network-interfaces \
                    --filters \
                        Name=subnet-id,Values=$subnet_id \
                        Name=tag:aws:cloudformation:stack-name,Values=${AWS::StackName} \
                    --query 'NetworkInterfaces[0].{id:NetworkInterfaceId, attachment:Attachment.AttachmentId}' \
                    --output text)
          # Set the two results to their own variables.
          eni_attachment=$(echo $eni_info | awk '{print $1}')
          eni_id=$(echo $eni_info | awk '{print $2}')
          # Detach ENI from existing system if its attached to something else.
          if [ "$eni_attachment" != "None" ] ; then
              aws ec2 detach-network-interface --force --attachment-id $eni_attachment
              aws ec2 wait network-interface-available --network-interface-ids $eni_id
          fi
          # Attach ENI.
          aws ec2 attach-network-interface --instance-id $id --device-index 1 --network-interface-id $eni_id
          # Restart Unbound.
          service unbound restart || service unbound start
          # Delete +2 resolver from dhclient script, set localhst instead.
          sed -i "/supersede domain-name-servers '$vpc_dns';/d" /etc/dhcp/dhclient.conf #delete old ns value.
          echo 'supersede domain-name-servers 127.0.0.1;' >> /etc/dhcp/dhclient.conf #add new ns value.
          # Refresh dhcp again.
          dhclient -r && dhclient
          # Signal the status from cfn-init.
          /opt/aws/bin/cfn-signal -e $? \
                  --stack ${AWS::StackName} \
                  --resource rAsgDnsProxyAz1 \
                  --region ${AWS::Region}

  # ASG Launch Config for DNS servers
  rLaunchConfigDnsProxyAz2:
    Type: AWS::AutoScaling::LaunchConfiguration
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          InstallAndRun:
            - install_cfn
            - install_app
        install_cfn:
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
              mode: '000400'
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.rLaunchConfigDnsProxy.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource rLaunchConfigDnsProxy --configsets InstallAndRun --region ${AWS::Region}
                runas=root
          services:
            sysvinit:
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'false'
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf
        install_app:
          packages:
            yum:
              gcc: []
              openssl-devel: []
              expat-devel: []
              unbound: []
          users:
            unbound:
              groups:
                - "unbound"
          files:
            /etc/unbound/unbound.conf:
              content: !Sub |
                server:
                    interface: 0.0.0.0
                    interface-automatic: yes
                    access-control: 10.0.0.0/8 allow_snoop
                    access-control: 172.16.0.0/12 allow_snoop
                    access-control: 192.168.0.0/16 allow_snoop
                    access-control: 127.0.0.0/8 allow_snoop
                    root-hints: "/etc/unbound/root.hints"
                    local-zone: "10.in-addr.arpa." nodefault
                    local-zone: "17.172.in-addr.arpa." nodefault
                    local-zone: "168.192.in-addr.arpa." nodefault
                forward-zone:
                    name: ${HostedZoneName}
                    forward-addr: @@vpc_dns@@
                forward-zone:
                    name: ${OnPremDomain}
                    forward-addr: ${OnPremDns1}
                    forward-addr: ${OnPremDns2}
                forward-zone:
                    name: "."
                    forward-addr: @@vpc_dns@@
            /etc/init/unbound.conf:
              content: !Sub |
                start on runlevel [2345]
                exec /usr/sbin/unbound
          commands:
            01_pull_root_hints:
              command: !Sub
                curl -o /etc/unbound/root.hints https://www.internic.net/domain/named.cache
          services:
            sysvinit:
              unbound:
                enabled: 'true'
                ensureRunning: 'false'  # We start this manually after sed runs in user data.
    Properties:
      BlockDeviceMappings:
        - DeviceName: "/dev/sdd"
          Ebs:
            DeleteOnTermination: true
            Encrypted: true
            VolumeSize: !Ref DnsInstanceVolumeSize
            VolumeType: gp2
      IamInstanceProfile: !Ref rProfileDnsServer
      ImageId: !FindInMap
        - mRegionMap
        - !Ref AWS::Region
        - AMIDNSPROXY
      InstanceType: !Ref InstanceType
      KeyName: !Ref Ec2KeyPairName
      SecurityGroups:
        - !Ref rDnsInstanceSg
      UserData:
        'Fn::Base64': !Sub |
          #!/bin/bash -xe
          # Set all the environment variables.
          id=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)
          mac=$(curl -s http://169.254.169.254/latest/meta-data/network/interfaces/macs/ | cut -d/ -f1 | awk '{print $1;exit}')
          subnet_id=$(curl -s http://169.254.169.254/latest/meta-data/network/interfaces/macs/$mac/subnet-id)
          vpc_cidr=$(curl -s http://169.254.169.254/latest/meta-data/network/interfaces/macs/$mac/vpc-ipv4-cidr-block)
          network=$(echo $vpc_cidr | cut -d '/' -f 1)
          vpc_dns=$(echo $network | awk -F. '{printf "%d.%d.%d.%d", $1,$2,$3,$4+2}')
          # Supersede DHCP-assigned name servers with the +2 resolver for now.
          echo 'supersede domain-name-servers '$vpc_dns';' >> /etc/dhcp/dhclient.conf
          # Lower DHCP timeout since we are statically assigning name servers.
          sed -i "/timeout 300;/d" /etc/dhcp/dhclient.conf #delete old timeout value.
          echo 'timeout 1;' >> /etc/dhcp/dhclient.conf #add new timeout value.
          # Refresh dhcp.
          dhclient -r && dhclient
          # Now that we have a working name server, run yum update.
          yum update -y
          # Run cfn-init helper script.
          /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource rLaunchConfigDnsProxyAz2 --configsets InstallAndRun --region ${AWS::Region}
          # Set proper +2 resolver value in unbound.conf.
          sed -i -e "s/@@vpc_dns@@/$vpc_dns/g" /etc/unbound/unbound.conf
          # Set the AWS default region.
          export AWS_DEFAULT_REGION=${AWS::Region}
          # Find ENI in our subnet. This spits out both the attachment id (or None) and the ENI ID.
          eni_info=$(aws ec2 describe-network-interfaces \
                    --filters \
                        Name=subnet-id,Values=$subnet_id \
                        Name=tag:aws:cloudformation:stack-name,Values=${AWS::StackName} \
                    --query 'NetworkInterfaces[0].{id:NetworkInterfaceId, attachment:Attachment.AttachmentId}' \
                    --output text)
          # Set the two results to their own variables.
          eni_attachment=$(echo $eni_info | awk '{print $1}')
          eni_id=$(echo $eni_info | awk '{print $2}')
          # Detach ENI from existing system if its attached to something else.
          if [ "$eni_attachment" != "None" ] ; then
              aws ec2 detach-network-interface --force --attachment-id $eni_attachment
              aws ec2 wait network-interface-available --network-interface-ids $eni_id
          fi
          # Attach ENI.
          aws ec2 attach-network-interface --instance-id $id --device-index 1 --network-interface-id $eni_id
          # Restart Unbound.
          service unbound restart || service unbound start
          # Delete +2 resolver from dhclient script, set localhst instead.
          sed -i "/supersede domain-name-servers '$vpc_dns';/d" /etc/dhcp/dhclient.conf #delete old ns value.
          echo 'supersede domain-name-servers 127.0.0.1;' >> /etc/dhcp/dhclient.conf #add new ns value.
          # Refresh dhcp again.
          dhclient -r && dhclient
          # Signal the status from cfn-init.
          /opt/aws/bin/cfn-signal -e $? \
                  --stack ${AWS::StackName} \
                  --resource rAsgDnsProxyAz2 \
                  --region ${AWS::Region}

  # ASG Launch Config for DNS servers
  rLaunchConfigDnsProxyAz3:
    Type: AWS::AutoScaling::LaunchConfiguration
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          InstallAndRun:
            - install_cfn
            - install_app
        install_cfn:
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
              mode: '000400'
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.rLaunchConfigDnsProxy.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource rLaunchConfigDnsProxy --configsets InstallAndRun --region ${AWS::Region}
                runas=root
          services:
            sysvinit:
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'false'
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf
        install_app:
          packages:
            yum:
              gcc: []
              openssl-devel: []
              expat-devel: []
              unbound: []
          users:
            unbound:
              groups:
                - "unbound"
          files:
            /etc/unbound/unbound.conf:
              content: !Sub |
                server:
                    interface: 0.0.0.0
                    interface-automatic: yes
                    access-control: 10.0.0.0/8 allow_snoop
                    access-control: 172.16.0.0/12 allow_snoop
                    access-control: 192.168.0.0/16 allow_snoop
                    access-control: 127.0.0.0/8 allow_snoop
                    root-hints: "/etc/unbound/root.hints"
                    local-zone: "10.in-addr.arpa." nodefault
                    local-zone: "17.172.in-addr.arpa." nodefault
                    local-zone: "168.192.in-addr.arpa." nodefault
                forward-zone:
                    name: ${HostedZoneName}
                    forward-addr: @@vpc_dns@@
                forward-zone:
                    name: ${OnPremDomain}
                    forward-addr: ${OnPremDns1}
                    forward-addr: ${OnPremDns2}
                forward-zone:
                    name: "."
                    forward-addr: @@vpc_dns@@
            /etc/init/unbound.conf:
              content: !Sub |
                start on runlevel [2345]
                exec /usr/sbin/unbound
          commands:
            01_pull_root_hints:
              command: !Sub
                curl -o /etc/unbound/root.hints https://www.internic.net/domain/named.cache
          services:
            sysvinit:
              unbound:
                enabled: 'true'
                ensureRunning: 'false'  # We start this manually after sed runs in user data.
    Properties:
      BlockDeviceMappings:
        - DeviceName: "/dev/sdd"
          Ebs:
            DeleteOnTermination: true
            Encrypted: true
            VolumeSize: !Ref DnsInstanceVolumeSize
            VolumeType: gp2
      IamInstanceProfile: !Ref rProfileDnsServer
      ImageId: !FindInMap
        - mRegionMap
        - !Ref AWS::Region
        - AMIDNSPROXY
      InstanceType: !Ref InstanceType
      KeyName: !Ref Ec2KeyPairName
      SecurityGroups:
        - !Ref rDnsInstanceSg
      UserData:
        'Fn::Base64': !Sub |
          #!/bin/bash -xe
          # Set all the environment variables.
          id=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)
          mac=$(curl -s http://169.254.169.254/latest/meta-data/network/interfaces/macs/ | cut -d/ -f1 | awk '{print $1;exit}')
          subnet_id=$(curl -s http://169.254.169.254/latest/meta-data/network/interfaces/macs/$mac/subnet-id)
          vpc_cidr=$(curl -s http://169.254.169.254/latest/meta-data/network/interfaces/macs/$mac/vpc-ipv4-cidr-block)
          network=$(echo $vpc_cidr | cut -d '/' -f 1)
          vpc_dns=$(echo $network | awk -F. '{printf "%d.%d.%d.%d", $1,$2,$3,$4+2}')
          # Supersede DHCP-assigned name servers with the +2 resolver for now.
          echo 'supersede domain-name-servers '$vpc_dns';' >> /etc/dhcp/dhclient.conf
          # Lower DHCP timeout since we are statically assigning name servers.
          sed -i "/timeout 300;/d" /etc/dhcp/dhclient.conf #delete old timeout value.
          echo 'timeout 1;' >> /etc/dhcp/dhclient.conf #add new timeout value.
          # Refresh dhcp.
          dhclient -r && dhclient
          # Now that we have a working name server, run yum update.
          yum update -y
          # Run cfn-init helper script.
          /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource rLaunchConfigDnsProxyAz3 --configsets InstallAndRun --region ${AWS::Region}
          # Set proper +2 resolver value in unbound.conf.
          sed -i -e "s/@@vpc_dns@@/$vpc_dns/g" /etc/unbound/unbound.conf
          # Set the AWS default region.
          export AWS_DEFAULT_REGION=${AWS::Region}
          # Find ENI in our subnet. This spits out both the attachment id (or None) and the ENI ID.
          eni_info=$(aws ec2 describe-network-interfaces \
                    --filters \
                        Name=subnet-id,Values=$subnet_id \
                        Name=tag:aws:cloudformation:stack-name,Values=${AWS::StackName} \
                    --query 'NetworkInterfaces[0].{id:NetworkInterfaceId, attachment:Attachment.AttachmentId}' \
                    --output text)
          # Set the two results to their own variables.
          eni_attachment=$(echo $eni_info | awk '{print $1}')
          eni_id=$(echo $eni_info | awk '{print $2}')
          # Detach ENI from existing system if its attached to something else.
          if [ "$eni_attachment" != "None" ] ; then
              aws ec2 detach-network-interface --force --attachment-id $eni_attachment
              aws ec2 wait network-interface-available --network-interface-ids $eni_id
          fi
          # Attach ENI.
          aws ec2 attach-network-interface --instance-id $id --device-index 1 --network-interface-id $eni_id
          # Restart Unbound.
          service unbound restart || service unbound start
          # Delete +2 resolver from dhclient script, set localhst instead.
          sed -i "/supersede domain-name-servers '$vpc_dns';/d" /etc/dhcp/dhclient.conf #delete old ns value.
          echo 'supersede domain-name-servers 127.0.0.1;' >> /etc/dhcp/dhclient.conf #add new ns value.
          # Refresh dhcp again.
          dhclient -r && dhclient
          # Signal the status from cfn-init.
          /opt/aws/bin/cfn-signal -e $? \
                  --stack ${AWS::StackName} \
                  --resource rAsgDnsProxyAz3 \
                  --region ${AWS::Region}

  # Instance Profile for DNS proxy instances.
  rProfileDnsServer:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Path: '/'
      Roles:
        - Ref: rRoleDnsServer

  # IAM Role for DNS proxy instances.
  rRoleDnsServer:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
  # IAM Policy for DNS proxy instances.
  rPolicyDnsServer:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      Description: Policy for DNS instance app Role
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Sid: ManageENIs
            Action:
              - ec2:AttachNetworkInterface
              - ec2:DetachNetworkInterface
              - ec2:DescribeNetworkInterfaces
            Resource: "*"
      Roles:
        - !Ref rRoleDnsServer

  ## ENIs
  # Security Group for DNS ENIs
  rDnsEniSg:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "DNS Proxy Server SG"
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: icmp
          FromPort: '8'
          ToPort: '-1'
          CidrIp: "10.0.0.0/8"
        - IpProtocol: icmp
          FromPort: '8'
          ToPort: '-1'
          CidrIp: "172.16.0.0/12"
        - IpProtocol: icmp
          FromPort: '8'
          ToPort: '-1'
          CidrIp: "192.168.0.0/16"
        - IpProtocol: tcp
          FromPort: '53'
          ToPort: '53'
          CidrIp: "10.0.0.0/8"
        - IpProtocol: tcp
          FromPort: '53'
          ToPort: '53'
          CidrIp: "172.16.0.0/12"
        - IpProtocol: tcp
          FromPort: '53'
          ToPort: '53'
          CidrIp: "192.168.0.0/16"
        - IpProtocol: udp
          FromPort: '53'
          ToPort: '53'
          CidrIp: "10.0.0.0/8"
        - IpProtocol: udp
          FromPort: '53'
          ToPort: '53'
          CidrIp: "172.16.0.0/12"
        - IpProtocol: udp
          FromPort: '53'
          ToPort: '53'
          CidrIp: "192.168.0.0/16"
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref AppName, !Ref EnvName, 'dns', 'sg']]
        - Key: SWA:Name
          Value: !Join ['-', [!Ref AppName, !Ref EnvName, 'dns', 'sg']]
        - Key: SWA:CostCenter
          Value: !Ref SWACostCenter
        - Key: SWA:PID
          Value: !Ref SWAPID
        - Key: SWA:Confidentiality
          Value: !Ref SWAConfidentiality
        - Key: SWA:Compliance
          Value: !Ref SWACompliance
        - Key: SWA:BusinessService
          Value: !Ref SWABusinessService
        - Key: SWA:Environment
          Value: !Ref EnvName

  # Security Group for DNS ENIs
  rDnsInstanceSg:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "DNS Proxy Server SG"
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: icmp
          FromPort: '8'
          ToPort: '-1'
          CidrIp: "10.0.0.0/8"
        - IpProtocol: icmp
          FromPort: '8'
          ToPort: '-1'
          CidrIp: "172.16.0.0/12"
        - IpProtocol: icmp
          FromPort: '8'
          ToPort: '-1'
          CidrIp: "192.168.0.0/16"
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: "10.0.0.0/8"
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: "172.16.0.0/12"
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: "192.168.0.0/16"
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref AppName, !Ref EnvName, 'dns-proxy', 'sg']]
        - Key: SWA:Name
          Value: !Join ['-', [!Ref AppName, !Ref EnvName, 'dns-proxy', 'sg']]
        - Key: SWA:CostCenter
          Value: !Ref SWACostCenter
        - Key: SWA:PID
          Value: !Ref SWAPID
        - Key: SWA:Confidentiality
          Value: !Ref SWAConfidentiality
        - Key: SWA:Compliance
          Value: !Ref SWACompliance
        - Key: SWA:BusinessService
          Value: !Ref SWABusinessService
        - Key: SWA:Environment
          Value: !Ref EnvName

  ## ENIs
  # ENI AZ 1
  rEni1Az1:
    Type: AWS::EC2::NetworkInterface
    Properties:
      Description: !Join ['-', [!Ref EnvName, 'dns-proxy-az1', 'eni']]
      GroupSet:
        - !Ref rDnsEniSg
      PrivateIpAddress: !Ref DnsProxyIpAz1
      SubnetId: !Ref SubnetIdAz1
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref AppName, !Ref EnvName, 'dns', !Select ['0', !GetAZs ''], 'eni']]
        - Key: SWA:Name
          Value: !Join ['-', [!Ref AppName, !Ref EnvName, 'dns', !Select ['0', !GetAZs ''], 'eni']]
        - Key: SWA:CostCenter
          Value: !Ref SWACostCenter
        - Key: SWA:PID
          Value: !Ref SWAPID
        - Key: SWA:Confidentiality
          Value: !Ref SWAConfidentiality
        - Key: SWA:Compliance
          Value: !Ref SWACompliance
        - Key: SWA:BusinessService
          Value: !Ref SWABusinessService
        - Key: SWA:Environment
          Value: !Ref EnvName

  # ENI AZ 2
  rEni1Az2:
    Type: AWS::EC2::NetworkInterface
    Properties:
      Description: !Join ['-', [!Ref EnvName, 'dns-proxy-az2', 'eni']]
      GroupSet:
        - !Ref rDnsEniSg
      PrivateIpAddress: !Ref DnsProxyIpAz2
      SubnetId: !Ref SubnetIdAz2
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref AppName, !Ref EnvName, 'dns', !Select ['1', !GetAZs ''], 'eni']]
        - Key: SWA:Name
          Value: !Join ['-', [!Ref AppName, !Ref EnvName, 'dns', !Select ['1', !GetAZs ''], 'eni']]
        - Key: SWA:CostCenter
          Value: !Ref SWACostCenter
        - Key: SWA:PID
          Value: !Ref SWAPID
        - Key: SWA:Confidentiality
          Value: !Ref SWAConfidentiality
        - Key: SWA:Compliance
          Value: !Ref SWACompliance
        - Key: SWA:BusinessService
          Value: !Ref SWABusinessService
        - Key: SWA:Environment
          Value: !Ref EnvName

  # ENI AZ 3
  rEni1Az3:
    Type: AWS::EC2::NetworkInterface
    Properties:
      Description: !Join ['-', [!Ref EnvName, 'dns-proxy-az3', 'eni']]
      GroupSet:
        - !Ref rDnsEniSg
      PrivateIpAddress: !Ref DnsProxyIpAz3
      SubnetId: !Ref SubnetIdAz3
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref AppName, !Ref EnvName, 'dns', !Select ['2', !GetAZs ''], 'eni']]
        - Key: SWA:Name
          Value: !Join ['-', [!Ref AppName, !Ref EnvName, 'dns', !Select ['2', !GetAZs ''], 'eni']]
        - Key: SWA:CostCenter
          Value: !Ref SWACostCenter
        - Key: SWA:PID
          Value: !Ref SWAPID
        - Key: SWA:Confidentiality
          Value: !Ref SWAConfidentiality
        - Key: SWA:Compliance
          Value: !Ref SWACompliance
        - Key: SWA:BusinessService
          Value: !Ref SWABusinessService
        - Key: SWA:Environment
          Value: !Ref EnvName


Outputs:
  DnsProxyIpAz1:
    Description: 'The static IP of the DNS proxy located in AZ 1'
    Value: !Ref DnsProxyIpAz1
    Export:
      Name: !Sub '${AWS::StackName}-DnsProxyIpAz1'
  DnsProxyIpAz2:
    Description: 'The static IP of the DNS proxy located in AZ 2'
    Value: !Ref DnsProxyIpAz2
    Export:
      Name: !Sub '${AWS::StackName}-DnsProxyIpAz2'
  DnsProxyIpAz3:
    Description: 'The static IP of the DNS proxy located in AZ 3'
    Value: !Ref DnsProxyIpAz3
    Export:
      Name: !Sub '${AWS::StackName}-DnsProxyIpAz3'
