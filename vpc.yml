AWSTemplateFormatVersion: '2010-09-09'
Description: 'Creates VPC and its base resources, across 3 AZs: VPC, Subnets, Routes tables, and NACLs.'

Conditions:
  cCreatePublSub1: !Not [!Equals [!Ref pPublSubAz1, '']]
  cCreatePublSub2: !Not [!Equals [!Ref pPublSubAz2, '']]
  cCreatePublSub3: !Not [!Equals [!Ref pPublSubAz3, '']]
  cCreateMgmtSub1: !Not [!Equals [!Ref pMgmtSubAz1, '']]
  cCreateMgmtSub2: !Not [!Equals [!Ref pMgmtSubAz2, '']]
  cCreateMgmtSub3: !Not [!Equals [!Ref pMgmtSubAz3, '']]
  cCreatePrivSub1: !Not [!Equals [!Ref pPrivSubAz1, '']]
  cCreatePrivSub2: !Not [!Equals [!Ref pPrivSubAz2, '']]
  cCreatePrivSub3: !Not [!Equals [!Ref pPrivSubAz3, '']]
  cCreateDataSub1: !Not [!Equals [!Ref pDataSubAz1, '']]
  cCreateDataSub2: !Not [!Equals [!Ref pDataSubAz2, '']]
  cCreateDataSub3: !Not [!Equals [!Ref pDataSubAz3, '']]

  cCreatePublResources: !Or
    - !Condition cCreatePublSub1
    - !Condition cCreatePublSub2
    - !Condition cCreatePublSub3

  cCreatePrivResources: !Or
    - !Condition cCreatePrivSub1
    - !Condition cCreatePrivSub2
    - !Condition cCreatePrivSub3

  cCreateMgmtResources: !Or
    - !Condition cCreateMgmtSub1
    - !Condition cCreateMgmtSub2
    - !Condition cCreateMgmtSub3

  cCreateDataResources: !Or
    - !Condition cCreateDataSub1
    - !Condition cCreateDataSub2
    - !Condition cCreateDataSub3

  cConfigureDirectConnect: !Equals [!Ref pConfigureDirectConnect, true]
  cNotLabEnvironment: !Not [!Equals [!Ref pEnvName, lab]]
  cCreateVGW: !And
    - !Condition cConfigureDirectConnect
    - !Condition cNotLabEnvironment

  cVGWforPublic: !And
    - !Condition cCreateVGW
    - !Condition cCreatePublResources

  cVGWforPrivSub1: !And
    - !Condition cCreateVGW
    - !Condition cCreatePrivSub1

  cVGWforPrivSub2: !And
    - !Condition cCreateVGW
    - !Condition cCreatePrivSub2

  cVGWforPrivSub3: !And
    - !Condition cCreateVGW
    - !Condition cCreatePrivSub3

  cVGWforMgmtSub1: !And
    - !Condition cCreateVGW
    - !Condition cCreateMgmtSub1

  cVGWforMgmtSub2: !And
    - !Condition cCreateVGW
    - !Condition cCreateMgmtSub2

  cVGWforMgmtSub3: !And
    - !Condition cCreateVGW
    - !Condition cCreateMgmtSub3

  cVGWforData: !And
    - !Condition cCreateVGW
    - !Condition cCreateDataResources

  cCreateNatGWforAz1: !And
    - !Condition cCreatePublSub1
    - !Or
      - !Condition cCreatePrivSub1
      - !Condition cCreateMgmtSub1

  cCreateNatGWforAz2: !And
    - !Condition cCreatePublSub2
    - !Or
      - !Condition cCreatePrivSub2
      - !Condition cCreateMgmtSub2

  cCreateNatGWforAz3: !And
    - !Condition cCreatePublSub3
    - !Or
      - !Condition cCreatePrivSub3
      - !Condition cCreateMgmtSub3


Parameters:
  pVpcCidrBlock:
    Type: String
    Description: VPC CIDR Block
    MinLength: 0
    MaxLength: 18
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})\/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  pPublSubAz1:
    Type: String
    Default: ''
    MinLength: 0
    MaxLength: 18
    AllowedPattern: '|(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})\/(\d{1,2})'
    Description: 'Public Subnet Cidr for AZ1'
  pPublSubAz2:
    Type: String
    Default: ''
    MinLength: 0
    MaxLength: 18
    AllowedPattern: '|(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})\/(\d{1,2})'
    Description: 'Public Subnet Cidr for AZ2'
  pPublSubAz3:
    Type: String
    Default: ''
    MinLength: 0
    MaxLength: 18
    AllowedPattern: '|(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})\/(\d{1,2})'
    Description: 'Public Subnet Cidr for AZ3'
  pMgmtSubAz1:
    Type: String
    Default: ''
    MinLength: 0
    MaxLength: 18
    AllowedPattern: '|(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})\/(\d{1,2})'
    Description: 'Management Subnet Cidr for AZ1'
  pMgmtSubAz2:
    Type: String
    Default: ''
    MinLength: 0
    MaxLength: 18
    AllowedPattern: '|(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})\/(\d{1,2})'
    Description: 'Management Subnet Cidr for AZ2'
  pMgmtSubAz3:
    Type: String
    Default: ''
    MinLength: 0
    MaxLength: 18
    AllowedPattern: '|(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})\/(\d{1,2})'
    Description: 'Management Subnet Cidr for AZ3'
  pPrivSubAz1:
    Type: String
    Default: ''
    MinLength: 0
    MaxLength: 18
    AllowedPattern: '|(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})\/(\d{1,2})'
    Description: 'Private Subnet Cidr for AZ1'
  pPrivSubAz2:
    Type: String
    Default: ''
    MinLength: 0
    MaxLength: 18
    AllowedPattern: '|(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})\/(\d{1,2})'
    Description: 'Private Subnet Cidr for AZ2'
  pPrivSubAz3:
    Type: String
    Default: ''
    MinLength: 0
    MaxLength: 18
    AllowedPattern: '|(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})\/(\d{1,2})'
    Description: 'Private  Subnet Cidr for AZ3'
  pDataSubAz1:
    Type: String
    Default: ''
    MinLength: 0
    MaxLength: 18
    AllowedPattern: '|(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})\/(\d{1,2})'
    Description: 'Data Subnet Cidr for AZ1'
  pDataSubAz2:
    Type: String
    Default: ''
    MinLength: 0
    MaxLength: 18
    AllowedPattern: '|(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})\/(\d{1,2})'
    Description: 'Data Subnet Cidr for AZ2'
  pDataSubAz3:
    Type: String
    Default: ''
    MinLength: 0
    MaxLength: 18
    AllowedPattern: '|(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})\/(\d{1,2})'
    Description: 'Data Subnet Cidr for AZ3'
  pConfigureDirectConnect:
    Type: String
    Default: false
    Description: 'Configure VPC to use Direct Connect'
    AllowedValues:
      - true
      - false
    ConstraintDescription: 'Must indicate true or false'
  pCsrPreferredPath:
    Type: String
    Description: 'The preferred network path VPC to SWA (CSR1, CSR2)'
    Default: CSR1
    AllowedValues:
      - CSR1
      - CSR2
  pInitiateSpoke:
    Type: String
    Description: 'initiate connection to direct connect'
    Default: false
    AllowedValues:
      - true
      - false
  pAppName:
    Type: String
    Description: 'The Name of the Application'
  pEnvName:
    Type: String
    Description: 'Environment Name - lab, dev, qa, prod'
    AllowedValues:
      - lab
      - dev
      - qa
      - prod
    ConstraintDescription: 'Must be lab, dev, qa, or prod'
  pCostCenter:
    Type: String
    Description: 'Cost Center Number'
  pPID:
    Type: String
    Description: 'IT-XXXXX, IO-XXXXX'
  pConfidentiality:
    Type: String
    Description: 'SWA Public, SWA Internal, SWA Confidential'
  pCompliance:
    Type: String
    Description: 'PCI, PII, NA'
  pBusinessService:
    Type: String
    Description: 'Booking, CheckIn, Manage irregular operations'


Resources:
# Create VPC
  rMainVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref pVpcCidrBlock
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref pAppName, !Ref pEnvName, !Ref 'AWS::Region', 'vpc']]
        - Key: SWA:Name
          Value: !Join ['-', [!Ref pAppName, !Ref pEnvName, !Ref 'AWS::Region', 'vpc']]
        - Key: SWA:CostCenter
          Value: !Ref pCostCenter
        - Key: SWA:PID
          Value: !Ref pPID
        - Key: SWA:Confidentiality
          Value: !Ref pConfidentiality
        - Key: SWA:Compliance
          Value: !Ref pCompliance
        - Key: SWA:BusinessService
          Value: !Ref pBusinessService
        - Key: SWA:Environment
          Value: !Ref pEnvName

# Create deafult DHCP Option set for VPC
  rVpcDhcpOptionsAssociation:
    Type: AWS::EC2::VPCDHCPOptionsAssociation
    Properties:
      DhcpOptionsId: default
      VpcId: !Ref rMainVPC

# Set up VPC for Direct Connect if reuqested
  rVirtualPrivateGateway:
    Condition: cCreateVGW
    Type: AWS::EC2::VPNGateway
    Properties:
      Type: 'ipsec.1'
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref pAppName, !Ref pEnvName, !Ref 'AWS::Region', 'vgw']]
        - Key: SWA:Name
          Value: !Join ['-', [!Ref pAppName, !Ref pEnvName, !Ref 'AWS::Region', 'vgw']]
        - Key: SWA:CostCenter
          Value: !Ref pCostCenter
        - Key: SWA:PID
          Value: !Ref pPID
        - Key: SWA:Confidentiality
          Value: !Ref pConfidentiality
        - Key: SWA:Compliance
          Value: !Ref pCompliance
        - Key: SWA:BusinessService
          Value: !Ref pBusinessService
        - Key: SWA:Environment
          Value: !Ref pEnvName
        - Key: !Join  ['', [!Ref pEnvName, '-transitVPC:', !Ref 'AWS::Region', ':preferred-path']]
          Value: !Ref pCsrPreferredPath
        - Key: !Join  ['', [!Ref pEnvName, '-transitVPC:', !Ref 'AWS::Region', ':spoke']]
          Value: !Ref pInitiateSpoke

  rVirtualPrivateGatewayAttachment:
    Condition: cCreateVGW
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref rMainVPC
      VpnGatewayId: !Ref rVirtualPrivateGateway

# Create the NAT Gateways for Private and/or Management subnets in AZ1, AZ2 and/or AZ3 if needed
  rNatGatewayAz1:
    Condition: cCreateNatGWforAz1
    DependsOn: rVpcGatewayAttachment
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
          - rNatGatewayEipAz1
          - AllocationId
      SubnetId: !Ref rPublSubAz1
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref pAppName, !Ref pEnvName, !Ref 'AWS::Region', 'natgw1']]
        - Key: SWA:Name
          Value: !Join ['-', [!Ref pAppName, !Ref pEnvName, !Ref 'AWS::Region', 'natgw1']]
        - Key: SWA:CostCenter
          Value: !Ref pCostCenter
        - Key: SWA:PID
          Value: !Ref pPID
        - Key: SWA:Confidentiality
          Value: !Ref pConfidentiality
        - Key: SWA:Compliance
          Value: !Ref pCompliance
        - Key: SWA:BusinessService
          Value: !Ref pBusinessService
        - Key: SWA:Environment
          Value: !Ref pEnvName
  rNatGatewayEipAz1:
    Condition: cCreateNatGWforAz1
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  rNatGatewayAz2:
    Condition: cCreateNatGWforAz2
    DependsOn: rVpcGatewayAttachment
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
          - rNatGatewayEipAz2
          - AllocationId
      SubnetId: !Ref rPublSubAz2
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref pAppName, !Ref pEnvName, !Ref 'AWS::Region', 'natgw2']]
        - Key: SWA:Name
          Value: !Join ['-', [!Ref pAppName, !Ref pEnvName, !Ref 'AWS::Region', 'natgw2']]
        - Key: SWA:CostCenter
          Value: !Ref pCostCenter
        - Key: SWA:PID
          Value: !Ref pPID
        - Key: SWA:Confidentiality
          Value: !Ref pConfidentiality
        - Key: SWA:Compliance
          Value: !Ref pCompliance
        - Key: SWA:BusinessService
          Value: !Ref pBusinessService
        - Key: SWA:Environment
          Value: !Ref pEnvName
  rNatGatewayEipAz2:
    Condition: cCreateNatGWforAz2
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  rNatGatewayAz3:
    Condition: cCreateNatGWforAz3
    DependsOn: rVpcGatewayAttachment
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
          - rNatGatewayEipAz3
          - AllocationId
      SubnetId: !Ref rPublSubAz3
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref pAppName, !Ref pEnvName, !Ref 'AWS::Region', 'natgw3']]
        - Key: SWA:Name
          Value: !Join ['-', [!Ref pAppName, !Ref pEnvName, !Ref 'AWS::Region', 'natgw3']]
        - Key: SWA:CostCenter
          Value: !Ref pCostCenter
        - Key: SWA:PID
          Value: !Ref pPID
        - Key: SWA:Confidentiality
          Value: !Ref pConfidentiality
        - Key: SWA:Compliance
          Value: !Ref pCompliance
        - Key: SWA:BusinessService
          Value: !Ref pBusinessService
        - Key: SWA:Environment
          Value: !Ref pEnvName
  rNatGatewayEipAz3:
    Condition: cCreateNatGWforAz3
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

# Create Public subnets and routes or AZ1, AZ2 and/or AZ3 if requested
  rPublSubAz1:
    Condition: cCreatePublSub1
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select ['0', !GetAZs '']
      CidrBlock: !Ref pPublSubAz1
      MapPublicIpOnLaunch: false
      VpcId: !Ref rMainVPC
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref pAppName, !Ref pEnvName, 'pub', !Select ['0', !GetAZs ''], 'subnet']]
        - Key: SWA:Name
          Value: !Join ['-', [!Ref pAppName, !Ref pEnvName, 'pub', !Select ['0', !GetAZs ''], 'subnet']]
        - Key: SWA:CostCenter
          Value: !Ref pCostCenter
        - Key: SWA:PID
          Value: !Ref pPID
        - Key: SWA:Confidentiality
          Value: !Ref pConfidentiality
        - Key: SWA:Compliance
          Value: !Ref pCompliance
        - Key: SWA:BusinessService
          Value: !Ref pBusinessService
        - Key: SWA:Environment
          Value: !Ref pEnvName
  rPublSubAz2:
    Condition: cCreatePublSub2
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select ['1', !GetAZs '']
      CidrBlock: !Ref pPublSubAz2
      MapPublicIpOnLaunch: false
      VpcId: !Ref rMainVPC
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref pAppName, !Ref pEnvName, 'pub', !Select ['1', !GetAZs ''], 'subnet']]
        - Key: SWA:Name
          Value: !Join ['-', [!Ref pAppName, !Ref pEnvName, 'pub', !Select ['1', !GetAZs ''], 'subnet']]
        - Key: SWA:CostCenter
          Value: !Ref pCostCenter
        - Key: SWA:PID
          Value: !Ref pPID
        - Key: SWA:Confidentiality
          Value: !Ref pConfidentiality
        - Key: SWA:Compliance
          Value: !Ref pCompliance
        - Key: SWA:BusinessService
          Value: !Ref pBusinessService
        - Key: SWA:Environment
          Value: !Ref pEnvName
  rPublSubAz3:
    Condition: cCreatePublSub3
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select ['2', !GetAZs '']
      CidrBlock: !Ref pPublSubAz3
      MapPublicIpOnLaunch: false
      VpcId: !Ref rMainVPC
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref pAppName, !Ref pEnvName, 'pub', !Select ['2', !GetAZs ''], 'subnet']]
        - Key: SWA:Name
          Value: !Join ['-', [!Ref pAppName, !Ref pEnvName, 'pub', !Select ['2', !GetAZs ''], 'subnet']]
        - Key: SWA:CostCenter
          Value: !Ref pCostCenter
        - Key: SWA:PID
          Value: !Ref pPID
        - Key: SWA:Confidentiality
          Value: !Ref pConfidentiality
        - Key: SWA:Compliance
          Value: !Ref pCompliance
        - Key: SWA:BusinessService
          Value: !Ref pBusinessService
        - Key: SWA:Environment
          Value: !Ref pEnvName
  rPublSubRt:
    Condition: cCreatePublResources
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref rMainVPC
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref pAppName, !Ref pEnvName, 'pub', 'rt']]
        - Key: SWA:Name
          Value: !Join ['-', [!Ref pAppName, !Ref pEnvName, 'pub', 'rt']]
        - Key: SWA:CostCenter
          Value: !Ref pCostCenter
        - Key: SWA:PID
          Value: !Ref pPID
        - Key: SWA:Confidentiality
          Value: !Ref pConfidentiality
        - Key: SWA:Compliance
          Value: !Ref pCompliance
        - Key: SWA:BusinessService
          Value: !Ref pBusinessService
        - Key: SWA:Environment
          Value: !Ref pEnvName
  rPublicSubnet1RouteTableAssociation:
    Condition: cCreatePublSub1
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref rPublSubRt
      SubnetId: !Ref rPublSubAz1
  rPublicSubnet2RouteTableAssociation:
    Condition: cCreatePublSub2
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref rPublSubRt
      SubnetId: !Ref rPublSubAz2
  rPublicSubnet3RouteTableAssociation:
    Condition: cCreatePublSub3
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref rPublSubRt
      SubnetId: !Ref rPublSubAz3

# Create the Internet Gateway for public subnets if any were created
  rInternetGateway:
    Condition: cCreatePublResources
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref pAppName, !Ref pEnvName, !Ref 'AWS::Region', 'igw']]
        - Key: SWA:Name
          Value: !Join ['-', [!Ref pAppName, !Ref pEnvName, !Ref 'AWS::Region', 'igw']]
        - Key: SWA:CostCenter
          Value: !Ref pCostCenter
        - Key: SWA:PID
          Value: !Ref pPID
        - Key: SWA:Confidentiality
          Value: !Ref pConfidentiality
        - Key: SWA:Compliance
          Value: !Ref pCompliance
        - Key: SWA:BusinessService
          Value: !Ref pBusinessService
        - Key: SWA:Environment
          Value: !Ref pEnvName
  rVpcGatewayAttachment:
    Condition: cCreatePublResources
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref rInternetGateway
      VpcId: !Ref rMainVPC

# Create Private subnets and routes or AZ1, AZ2 and/or AZ3 if requested
  rPrivSubAz1:
    Condition: cCreatePrivSub1
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select ['0', !GetAZs '']
      CidrBlock: !Ref pPrivSubAz1
      MapPublicIpOnLaunch: false
      VpcId: !Ref rMainVPC
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref pAppName, !Ref pEnvName, 'priv', !Select ['0', !GetAZs ''], 'subnet']]
        - Key: SWA:Name
          Value: !Join ['-', [!Ref pAppName, !Ref pEnvName, 'priv', !Select ['0', !GetAZs ''], 'subnet']]
        - Key: SWA:CostCenter
          Value: !Ref pCostCenter
        - Key: SWA:PID
          Value: !Ref pPID
        - Key: SWA:Confidentiality
          Value: !Ref pConfidentiality
        - Key: SWA:Compliance
          Value: !Ref pCompliance
        - Key: SWA:BusinessService
          Value: !Ref pBusinessService
        - Key: SWA:Environment
          Value: !Ref pEnvName
  rPrivSubAz2:
    Condition: cCreatePrivSub2
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select ['1', !GetAZs '']
      CidrBlock: !Ref pPrivSubAz2
      MapPublicIpOnLaunch: false
      VpcId: !Ref rMainVPC
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref pAppName, !Ref pEnvName, 'priv', !Select ['1', !GetAZs ''], 'subnet']]
        - Key: SWA:Name
          Value: !Join ['-', [!Ref pAppName, !Ref pEnvName, 'priv', !Select ['1', !GetAZs ''], 'subnet']]
        - Key: SWA:CostCenter
          Value: !Ref pCostCenter
        - Key: SWA:PID
          Value: !Ref pPID
        - Key: SWA:Confidentiality
          Value: !Ref pConfidentiality
        - Key: SWA:Compliance
          Value: !Ref pCompliance
        - Key: SWA:BusinessService
          Value: !Ref pBusinessService
        - Key: SWA:Environment
          Value: !Ref pEnvName
  rPrivSubAz3:
    Condition: cCreatePrivSub3
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select ['2', !GetAZs '']
      CidrBlock: !Ref pPrivSubAz3
      MapPublicIpOnLaunch: false
      VpcId: !Ref rMainVPC
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref pAppName, !Ref pEnvName, 'priv', !Select ['2', !GetAZs ''], 'subnet']]
        - Key: SWA:Name
          Value: !Join ['-', [!Ref pAppName, !Ref pEnvName, 'priv', !Select ['2', !GetAZs ''], 'subnet']]
        - Key: SWA:CostCenter
          Value: !Ref pCostCenter
        - Key: SWA:PID
          Value: !Ref pPID
        - Key: SWA:Confidentiality
          Value: !Ref pConfidentiality
        - Key: SWA:Compliance
          Value: !Ref pCompliance
        - Key: SWA:BusinessService
          Value: !Ref pBusinessService
        - Key: SWA:Environment
          Value: !Ref pEnvName
  rPrivSubRtAz1:
    Condition: cCreatePrivSub1
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref rMainVPC
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref pAppName, !Ref pEnvName, 'priv', !Select ['0', !GetAZs ''], 'rt']]
        - Key: SWA:Name
          Value: !Join ['-', [!Ref pAppName, !Ref pEnvName, 'priv', !Select ['0', !GetAZs ''], 'rt']]
        - Key: SWA:CostCenter
          Value: !Ref pCostCenter
        - Key: SWA:PID
          Value: !Ref pPID
        - Key: SWA:Confidentiality
          Value: !Ref pConfidentiality
        - Key: SWA:Compliance
          Value: !Ref pCompliance
        - Key: SWA:BusinessService
          Value: !Ref pBusinessService
        - Key: SWA:Environment
          Value: !Ref pEnvName
  rPrivSubRtAz2:
    Condition: cCreatePrivSub2
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref rMainVPC
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref pAppName, !Ref pEnvName, 'priv', !Select ['1', !GetAZs ''], 'rt']]
        - Key: SWA:Name
          Value: !Join ['-', [!Ref pAppName, !Ref pEnvName, 'priv', !Select ['1', !GetAZs ''], 'rt']]
        - Key: SWA:CostCenter
          Value: !Ref pCostCenter
        - Key: SWA:PID
          Value: !Ref pPID
        - Key: SWA:Confidentiality
          Value: !Ref pConfidentiality
        - Key: SWA:Compliance
          Value: !Ref pCompliance
        - Key: SWA:BusinessService
          Value: !Ref pBusinessService
        - Key: SWA:Environment
          Value: !Ref pEnvName
  rPrivSubRtAz3:
    Condition: cCreatePrivSub3
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref rMainVPC
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref pAppName, !Ref pEnvName, 'priv', !Select ['2', !GetAZs ''], 'rt']]
        - Key: SWA:Name
          Value: !Join ['-', [!Ref pAppName, !Ref pEnvName, 'priv', !Select ['2', !GetAZs ''], 'rt']]
        - Key: SWA:CostCenter
          Value: !Ref pCostCenter
        - Key: SWA:PID
          Value: !Ref pPID
        - Key: SWA:Confidentiality
          Value: !Ref pConfidentiality
        - Key: SWA:Compliance
          Value: !Ref pCompliance
        - Key: SWA:BusinessService
          Value: !Ref pBusinessService
        - Key: SWA:Environment
          Value: !Ref pEnvName
  rPrivateSubnet1RouteTableAssociation:
    Condition: cCreatePrivSub1
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref rPrivSubRtAz1
      SubnetId: !Ref rPrivSubAz1
  rPrivateSubnet2RouteTableAssociation:
    Condition: cCreatePrivSub2
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref rPrivSubRtAz2
      SubnetId: !Ref rPrivSubAz2
  rPrivateSubnet3RouteTableAssociation:
    Condition: cCreatePrivSub3
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref rPrivSubRtAz3
      SubnetId: !Ref rPrivSubAz3

# Create Management subnets and routes or AZ1, AZ2 and/or AZ3 if requested
  rMgmtSubAz1:
    Condition: cCreateMgmtSub1
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select ['0', !GetAZs '']
      CidrBlock: !Ref pMgmtSubAz1
      MapPublicIpOnLaunch: false
      VpcId: !Ref rMainVPC
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref pAppName, !Ref pEnvName, 'mgmt', !Select ['0', !GetAZs ''], 'subnet']]
        - Key: SWA:Name
          Value: !Join ['-', [!Ref pAppName, !Ref pEnvName, 'mgmt', !Select ['0', !GetAZs ''], 'subnet']]
        - Key: SWA:CostCenter
          Value: !Ref pCostCenter
        - Key: SWA:PID
          Value: !Ref pPID
        - Key: SWA:Confidentiality
          Value: !Ref pConfidentiality
        - Key: SWA:Compliance
          Value: !Ref pCompliance
        - Key: SWA:BusinessService
          Value: !Ref pBusinessService
        - Key: SWA:Environment
          Value: !Ref pEnvName
  rMgmtSubAz2:
    Condition: cCreateMgmtSub2
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select ['1', !GetAZs '']
      CidrBlock: !Ref pMgmtSubAz2
      MapPublicIpOnLaunch: false
      VpcId: !Ref rMainVPC
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref pAppName, !Ref pEnvName, 'mgmt', !Select ['1', !GetAZs ''], 'subnet']]
        - Key: SWA:Name
          Value: !Join ['-', [!Ref pAppName, !Ref pEnvName, 'mgmt', !Select ['1', !GetAZs ''], 'subnet']]
        - Key: SWA:CostCenter
          Value: !Ref pCostCenter
        - Key: SWA:PID
          Value: !Ref pPID
        - Key: SWA:Confidentiality
          Value: !Ref pConfidentiality
        - Key: SWA:Compliance
          Value: !Ref pCompliance
        - Key: SWA:BusinessService
          Value: !Ref pBusinessService
        - Key: SWA:Environment
          Value: !Ref pEnvName
  rMgmtSubAz3:
    Condition: cCreateMgmtSub3
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select ['2', !GetAZs '']
      CidrBlock: !Ref pMgmtSubAz3
      MapPublicIpOnLaunch: false
      VpcId: !Ref rMainVPC
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref pAppName, !Ref pEnvName, 'mgmt', !Select ['2', !GetAZs ''], 'subnet']]
        - Key: SWA:Name
          Value: !Join ['-', [!Ref pAppName, !Ref pEnvName, 'mgmt', !Select ['2', !GetAZs ''], 'subnet']]
        - Key: SWA:CostCenter
          Value: !Ref pCostCenter
        - Key: SWA:PID
          Value: !Ref pPID
        - Key: SWA:Confidentiality
          Value: !Ref pConfidentiality
        - Key: SWA:Compliance
          Value: !Ref pCompliance
        - Key: SWA:BusinessService
          Value: !Ref pBusinessService
        - Key: SWA:Environment
          Value: !Ref pEnvName
  rMgmtSubRtAz1:
    Condition: cCreateMgmtSub1
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref rMainVPC
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref pAppName, !Ref pEnvName, 'mgmt', !Select ['0', !GetAZs ''], 'rt']]
        - Key: SWA:Name
          Value: !Join ['-', [!Ref pAppName, !Ref pEnvName, 'mgmt', !Select ['0', !GetAZs ''], 'rt']]
        - Key: SWA:CostCenter
          Value: !Ref pCostCenter
        - Key: SWA:PID
          Value: !Ref pPID
        - Key: SWA:Confidentiality
          Value: !Ref pConfidentiality
        - Key: SWA:Compliance
          Value: !Ref pCompliance
        - Key: SWA:BusinessService
          Value: !Ref pBusinessService
        - Key: SWA:Environment
          Value: !Ref pEnvName
  rMgmtSubRtAz2:
    Condition: cCreateMgmtSub2
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref rMainVPC
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref pAppName, !Ref pEnvName, 'mgmt', !Select ['1', !GetAZs ''], 'rt']]
        - Key: SWA:Name
          Value: !Join ['-', [!Ref pAppName, !Ref pEnvName, 'mgmt', !Select ['1', !GetAZs ''], 'rt']]
        - Key: SWA:CostCenter
          Value: !Ref pCostCenter
        - Key: SWA:PID
          Value: !Ref pPID
        - Key: SWA:Confidentiality
          Value: !Ref pConfidentiality
        - Key: SWA:Compliance
          Value: !Ref pCompliance
        - Key: SWA:BusinessService
          Value: !Ref pBusinessService
        - Key: SWA:Environment
          Value: !Ref pEnvName
  rMgmtSubRtAz3:
    Condition: cCreateMgmtSub3
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref rMainVPC
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref pAppName, !Ref pEnvName, 'mgmt', !Select ['2', !GetAZs ''], 'rt']]
        - Key: SWA:Name
          Value: !Join ['-', [!Ref pAppName, !Ref pEnvName, 'mgmt', !Select ['2', !GetAZs ''], 'rt']]
        - Key: SWA:CostCenter
          Value: !Ref pCostCenter
        - Key: SWA:PID
          Value: !Ref pPID
        - Key: SWA:Confidentiality
          Value: !Ref pConfidentiality
        - Key: SWA:Compliance
          Value: !Ref pCompliance
        - Key: SWA:BusinessService
          Value: !Ref pBusinessService
        - Key: SWA:Environment
          Value: !Ref pEnvName
  rManagementSubnet1RouteTableAssociation:
    Condition: cCreateMgmtSub1
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref rMgmtSubRtAz1
      SubnetId: !Ref rMgmtSubAz1
  rManagementSubnet2RouteTableAssociation:
    Condition: cCreateMgmtSub2
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref rMgmtSubRtAz2
      SubnetId: !Ref rMgmtSubAz2
  rManagementSubnet3RouteTableAssociation:
    Condition: cCreateMgmtSub3
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref rMgmtSubRtAz3
      SubnetId: !Ref rMgmtSubAz3

# Create Data subnets and routes or AZ1, AZ2 and/or AZ3 if requested
  rDataSubAz1:
    Condition: cCreateDataSub1
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select ['0', !GetAZs '']
      CidrBlock: !Ref pDataSubAz1
      MapPublicIpOnLaunch: false
      VpcId: !Ref rMainVPC
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref pAppName, !Ref pEnvName, 'data', !Select ['0', !GetAZs ''], 'subnet']]
        - Key: SWA:Name
          Value: !Join ['-', [!Ref pAppName, !Ref pEnvName, 'data', !Select ['0', !GetAZs ''], 'subnet']]
        - Key: SWA:CostCenter
          Value: !Ref pCostCenter
        - Key: SWA:PID
          Value: !Ref pPID
        - Key: SWA:Confidentiality
          Value: !Ref pConfidentiality
        - Key: SWA:Compliance
          Value: !Ref pCompliance
        - Key: SWA:BusinessService
          Value: !Ref pBusinessService
        - Key: SWA:Environment
          Value: !Ref pEnvName
  rDataSubAz2:
    Condition: cCreateDataSub2
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select ['1', !GetAZs '']
      CidrBlock: !Ref pDataSubAz2
      MapPublicIpOnLaunch: false
      VpcId: !Ref rMainVPC
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref pAppName, !Ref pEnvName, 'data', !Select ['1', !GetAZs ''], 'subnet']]
        - Key: SWA:Name
          Value: !Join ['-', [!Ref pAppName, !Ref pEnvName, 'data', !Select ['1', !GetAZs ''], 'subnet']]
        - Key: SWA:CostCenter
          Value: !Ref pCostCenter
        - Key: SWA:PID
          Value: !Ref pPID
        - Key: SWA:Confidentiality
          Value: !Ref pConfidentiality
        - Key: SWA:Compliance
          Value: !Ref pCompliance
        - Key: SWA:BusinessService
          Value: !Ref pBusinessService
        - Key: SWA:Environment
          Value: !Ref pEnvName
  rDataSubAz3:
    Condition: cCreateDataSub3
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select ['2', !GetAZs '']
      CidrBlock: !Ref pDataSubAz3
      MapPublicIpOnLaunch: false
      VpcId: !Ref rMainVPC
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref pAppName, !Ref pEnvName, 'data', !Select ['2', !GetAZs ''], 'subnet']]
        - Key: SWA:Name
          Value: !Join ['-', [!Ref pAppName, !Ref pEnvName, 'data', !Select ['2', !GetAZs ''], 'subnet']]
        - Key: SWA:CostCenter
          Value: !Ref pCostCenter
        - Key: SWA:PID
          Value: !Ref pPID
        - Key: SWA:Confidentiality
          Value: !Ref pConfidentiality
        - Key: SWA:Compliance
          Value: !Ref pCompliance
        - Key: SWA:BusinessService
          Value: !Ref pBusinessService
        - Key: SWA:Environment
          Value: !Ref pEnvName
  rDataSubRt:
    Condition: cCreateDataResources
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref rMainVPC
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref pAppName, !Ref pEnvName, 'data', 'rt']]
        - Key: SWA:Name
          Value: !Join ['-', [!Ref pAppName, !Ref pEnvName, 'data', 'rt']]
        - Key: SWA:CostCenter
          Value: !Ref pCostCenter
        - Key: SWA:PID
          Value: !Ref pPID
        - Key: SWA:Confidentiality
          Value: !Ref pConfidentiality
        - Key: SWA:Compliance
          Value: !Ref pCompliance
        - Key: SWA:BusinessService
          Value: !Ref pBusinessService
        - Key: SWA:Environment
          Value: !Ref pEnvName
  rDataSubnet1RouteTableAssociation:
    Condition: cCreateDataSub1
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref rDataSubRt
      SubnetId: !Ref rDataSubAz1
  rDataSubnet2RouteTableAssociation:
    Condition: cCreateDataSub2
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref rDataSubRt
      SubnetId: !Ref rDataSubAz2
  rDataSubnet3RouteTableAssociation:
    Condition: cCreateDataSub3
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref rDataSubRt
      SubnetId: !Ref rDataSubAz3

# Create the Public tier default route (0.0.0.0/0) to internet gateway
  rPublicTierDefaultRoute:
    Condition: cCreatePublResources
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref rPublSubRt
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref rInternetGateway

# Create the Public tier routes (10.0.0.0/8, 172.16.0.0/12, 192.168.0.0/16) back to direct connect
  rPublicTierInternalAgg1Route:
    Condition: cVGWforPublic
    Type: AWS::EC2::Route
    DependsOn: rVirtualPrivateGatewayAttachment
    Properties:
      RouteTableId: !Ref rPublSubRt
      DestinationCidrBlock: 10.0.0.0/8
      GatewayId: !Ref rVirtualPrivateGateway
  rPublicTierInternalAgg2Route:
    Condition: cVGWforPublic
    Type: AWS::EC2::Route
    DependsOn: rVirtualPrivateGatewayAttachment
    Properties:
      RouteTableId: !Ref rPublSubRt
      DestinationCidrBlock: 172.16.0.0/12
      GatewayId: !Ref rVirtualPrivateGateway
  rPublicTierInternalAgg3Route:
    Condition: cVGWforPublic
    Type: AWS::EC2::Route
    DependsOn: rVirtualPrivateGatewayAttachment
    Properties:
      RouteTableId: !Ref rPublSubRt
      DestinationCidrBlock: 192.168.0.0/16
      GatewayId: !Ref rVirtualPrivateGateway

# Create the Private tier default routes (0.0.0.0/0) from each AZ back to NAT gateways
  rPrivateTierDefaultRouteAZ1:
    Condition: cCreatePrivSub1
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref rPrivSubRtAz1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref rNatGatewayAz1
  rPrivateTierDefaultRouteAZ2:
    Condition: cCreatePrivSub2
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref rPrivSubRtAz2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref rNatGatewayAz2
  rPrivateTierDefaultRouteAZ3:
    Condition: cCreatePrivSub3
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref rPrivSubRtAz3
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref rNatGatewayAz3

# Create the Private tier routes (10.0.0.0/8, 172.16.0.0/12, 192.168.0.0/16) from each AZ back to direct connect
  rPrivateTierInternalAgg1RouteAZ1:
    Condition: cVGWforPrivSub1
    Type: AWS::EC2::Route
    DependsOn: rVirtualPrivateGatewayAttachment
    Properties:
      RouteTableId: !Ref rPrivSubRtAz1
      DestinationCidrBlock: 10.0.0.0/8
      GatewayId: !Ref rVirtualPrivateGateway
  rPrivateTierInternalAgg2RouteAZ1:
    Condition: cVGWforPrivSub1
    Type: AWS::EC2::Route
    DependsOn: rVirtualPrivateGatewayAttachment
    Properties:
      RouteTableId: !Ref rPrivSubRtAz1
      DestinationCidrBlock: 172.16.0.0/12
      GatewayId: !Ref rVirtualPrivateGateway
  rPrivateTierInternalAgg3RouteAZ1:
    Condition: cVGWforPrivSub1
    Type: AWS::EC2::Route
    DependsOn: rVirtualPrivateGatewayAttachment
    Properties:
      RouteTableId: !Ref rPrivSubRtAz1
      DestinationCidrBlock: 192.168.0.0/16
      GatewayId: !Ref rVirtualPrivateGateway
  rPrivateTierInternalAgg1RouteAZ2:
    Condition: cVGWforPrivSub2
    Type: AWS::EC2::Route
    DependsOn: rVirtualPrivateGatewayAttachment
    Properties:
      RouteTableId: !Ref rPrivSubRtAz2
      DestinationCidrBlock: 10.0.0.0/8
      GatewayId: !Ref rVirtualPrivateGateway
  rPrivateTierInternalAgg2RouteAZ2:
    Condition: cVGWforPrivSub2
    Type: AWS::EC2::Route
    DependsOn: rVirtualPrivateGatewayAttachment
    Properties:
      RouteTableId: !Ref rPrivSubRtAz2
      DestinationCidrBlock: 172.16.0.0/12
      GatewayId: !Ref rVirtualPrivateGateway
  rPrivateTierInternalAgg3RouteAZ2:
    Condition: cVGWforPrivSub2
    Type: AWS::EC2::Route
    DependsOn: rVirtualPrivateGatewayAttachment
    Properties:
      RouteTableId: !Ref rPrivSubRtAz2
      DestinationCidrBlock: 192.168.0.0/16
      GatewayId: !Ref rVirtualPrivateGateway
  rPrivateTierInternalAgg1RouteAZ3:
    Condition: cVGWforPrivSub3
    Type: AWS::EC2::Route
    DependsOn: rVirtualPrivateGatewayAttachment
    Properties:
      RouteTableId: !Ref rPrivSubRtAz3
      DestinationCidrBlock: 10.0.0.0/8
      GatewayId: !Ref rVirtualPrivateGateway
  rPrivateTierInternalAgg2RouteAZ3:
    Condition: cVGWforPrivSub3
    Type: AWS::EC2::Route
    DependsOn: rVirtualPrivateGatewayAttachment
    Properties:
      RouteTableId: !Ref rPrivSubRtAz3
      DestinationCidrBlock: 172.16.0.0/12
      GatewayId: !Ref rVirtualPrivateGateway
  rPrivateTierInternalAgg3RouteAZ3:
    Condition: cVGWforPrivSub3
    Type: AWS::EC2::Route
    DependsOn: rVirtualPrivateGatewayAttachment
    Properties:
      RouteTableId: !Ref rPrivSubRtAz3
      DestinationCidrBlock: 192.168.0.0/16
      GatewayId: !Ref rVirtualPrivateGateway

# Create the Management tier default routes (0.0.0.0/0) from each AZ back to NAT gateways
  rManagementTierDefaultRouteAZ1:
    Condition: cCreateMgmtSub1
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref rMgmtSubRtAz1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref rNatGatewayAz1
  rManagementTierDefaultRouteAZ2:
    Condition: cCreateMgmtSub2
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref rMgmtSubRtAz2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref rNatGatewayAz2
  rManagementTierDefaultRouteAZ3:
    Condition: cCreateMgmtSub3
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref rMgmtSubRtAz3
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref rNatGatewayAz3

# Create the Management tier routes (10.0.0.0/8, 172.16.0.0/12, 192.168.0.0/16) from each AZ back to direct connect
  rMgmtTierInternalAgg1RouteAZ1:
    Condition: cVGWforMgmtSub1
    Type: AWS::EC2::Route
    DependsOn: rVirtualPrivateGatewayAttachment
    Properties:
      RouteTableId: !Ref rMgmtSubRtAz1
      DestinationCidrBlock: 10.0.0.0/8
      GatewayId: !Ref rVirtualPrivateGateway
  rMgmtTierInternalAgg2RouteAZ1:
    Condition: cVGWforMgmtSub1
    Type: AWS::EC2::Route
    DependsOn: rVirtualPrivateGatewayAttachment
    Properties:
      RouteTableId: !Ref rMgmtSubRtAz1
      DestinationCidrBlock: 172.16.0.0/12
      GatewayId: !Ref rVirtualPrivateGateway
  rMgmtTierInternalAgg3RouteAZ1:
    Condition: cVGWforMgmtSub1
    Type: AWS::EC2::Route
    DependsOn: rVirtualPrivateGatewayAttachment
    Properties:
      RouteTableId: !Ref rMgmtSubRtAz1
      DestinationCidrBlock: 192.168.0.0/16
      GatewayId: !Ref rVirtualPrivateGateway
  rMgmtTierInternalAgg1RouteAZ2:
    Condition: cVGWforMgmtSub2
    Type: AWS::EC2::Route
    DependsOn: rVirtualPrivateGatewayAttachment
    Properties:
      RouteTableId: !Ref rMgmtSubRtAz2
      DestinationCidrBlock: 10.0.0.0/8
      GatewayId: !Ref rVirtualPrivateGateway
  rMgmtTierInternalAgg2RouteAZ2:
    Condition: cVGWforMgmtSub2
    Type: AWS::EC2::Route
    DependsOn: rVirtualPrivateGatewayAttachment
    Properties:
      RouteTableId: !Ref rMgmtSubRtAz2
      DestinationCidrBlock: 172.16.0.0/12
      GatewayId: !Ref rVirtualPrivateGateway
  rMgmtTierInternalAgg3RouteAZ2:
    Condition: cVGWforMgmtSub2
    Type: AWS::EC2::Route
    DependsOn: rVirtualPrivateGatewayAttachment
    Properties:
      RouteTableId: !Ref rMgmtSubRtAz2
      DestinationCidrBlock: 192.168.0.0/16
      GatewayId: !Ref rVirtualPrivateGateway
  rMgmtTierInternalAgg1RouteAZ3:
    Condition: cVGWforMgmtSub3
    Type: AWS::EC2::Route
    DependsOn: rVirtualPrivateGatewayAttachment
    Properties:
      RouteTableId: !Ref rMgmtSubRtAz3
      DestinationCidrBlock: 10.0.0.0/8
      GatewayId: !Ref rVirtualPrivateGateway
  rMgmtTierInternalAgg2RouteAZ3:
    Condition: cVGWforMgmtSub3
    Type: AWS::EC2::Route
    DependsOn: rVirtualPrivateGatewayAttachment
    Properties:
      RouteTableId: !Ref rMgmtSubRtAz3
      DestinationCidrBlock: 172.16.0.0/12
      GatewayId: !Ref rVirtualPrivateGateway
  rMgmtTierInternalAgg3RouteAZ3:
    Condition: cVGWforMgmtSub3
    Type: AWS::EC2::Route
    DependsOn: rVirtualPrivateGatewayAttachment
    Properties:
      RouteTableId: !Ref rMgmtSubRtAz3
      DestinationCidrBlock: 192.168.0.0/16
      GatewayId: !Ref rVirtualPrivateGateway

# Create the Data tier routes (10.0.0.0/8, 172.16.0.0/12, 192.168.0.0/16) from each AZ back to direct connect
  rDataTierInternalAgg1Route:
    Condition: cVGWforData
    Type: AWS::EC2::Route
    DependsOn: rVirtualPrivateGatewayAttachment
    Properties:
      RouteTableId: !Ref rDataSubRt
      DestinationCidrBlock: 10.0.0.0/8
      GatewayId: !Ref rVirtualPrivateGateway
  rDataTierInternalAgg2Route:
    Condition: cVGWforData
    Type: AWS::EC2::Route
    DependsOn: rVirtualPrivateGatewayAttachment
    Properties:
      RouteTableId: !Ref rDataSubRt
      DestinationCidrBlock: 172.16.0.0/12
      GatewayId: !Ref rVirtualPrivateGateway
  rDataTierInternalAgg3Route:
    Condition: cVGWforData
    Type: AWS::EC2::Route
    DependsOn: rVirtualPrivateGatewayAttachment
    Properties:
      RouteTableId: !Ref rDataSubRt
      DestinationCidrBlock: 192.168.0.0/16
      GatewayId: !Ref rVirtualPrivateGateway

# Create NACLs for Public subnets
  rPublicTierSubnetsNacl:
    Condition: cCreatePublResources
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref rMainVPC
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref pAppName, !Ref pEnvName, !Ref 'AWS::Region', 'pub', 'nacl']]
        - Key: SWA:Name
          Value: !Join ['-', [!Ref pAppName, !Ref pEnvName, !Ref 'AWS::Region', 'pub', 'nacl']]
        - Key: SWA:CostCenter
          Value: !Ref pCostCenter
        - Key: SWA:PID
          Value: !Ref pPID
        - Key: SWA:Confidentiality
          Value: !Ref pConfidentiality
        - Key: SWA:Compliance
          Value: !Ref pCompliance
        - Key: SWA:BusinessService
          Value: !Ref pBusinessService
        - Key: SWA:Environment
          Value: !Ref pEnvName
  rPublicTierSubnetsNaclIn:
    Condition: cCreatePublResources
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref rPublicTierSubnetsNacl
      RuleNumber: '100'
      Protocol: '-1'
      RuleAction: 'allow'
      CidrBlock: '0.0.0.0/0'
      PortRange:
        From: '-1'
        To: '-1'
  rPublicTierSubnetsNaclOut:
    Condition: cCreatePublResources
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref rPublicTierSubnetsNacl
      RuleNumber: '100'
      Protocol: '-1'
      RuleAction: 'allow'
      Egress: 'true'
      CidrBlock: '0.0.0.0/0'
      PortRange:
        From: '-1'
        To: '-1'
  rNaclAssocPubSubnet1:
    Condition: cCreatePublSub1
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref rPublicTierSubnetsNacl
      SubnetId: !Ref rPublSubAz1
  rNaclAssocPubSubnet2:
    Condition: cCreatePublSub2
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref rPublicTierSubnetsNacl
      SubnetId: !Ref rPublSubAz2
  rNaclAssocPubSubnet3:
    Condition: cCreatePublSub3
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref rPublicTierSubnetsNacl
      SubnetId: !Ref rPublSubAz3

# Create NACLs for Private subnets
  rPrivateTierSubnetsNacl:
    Condition: cCreatePrivResources
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref rMainVPC
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref pAppName, !Ref pEnvName, !Ref 'AWS::Region', 'priv', 'nacl']]
        - Key: SWA:Name
          Value: !Join ['-', [!Ref pAppName, !Ref pEnvName, !Ref 'AWS::Region', 'priv', 'nacl']]
        - Key: SWA:CostCenter
          Value: !Ref pCostCenter
        - Key: SWA:PID
          Value: !Ref pPID
        - Key: SWA:Confidentiality
          Value: !Ref pConfidentiality
        - Key: SWA:Compliance
          Value: !Ref pCompliance
        - Key: SWA:BusinessService
          Value: !Ref pBusinessService
        - Key: SWA:Environment
          Value: !Ref pEnvName
  rPrivateTierSubnetsNaclIn:
    Condition: cCreatePrivResources
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref rPrivateTierSubnetsNacl
      RuleNumber: '100'
      Protocol: '-1'
      RuleAction: 'allow'
      Egress: 'false'
      CidrBlock: '0.0.0.0/0'
      PortRange:
        From: '-1'
        To: '-1'
  rPrivateTierSubnetsNaclOut:
    Condition: cCreatePrivResources
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref rPrivateTierSubnetsNacl
      RuleNumber: '100'
      Protocol: '-1'
      RuleAction: 'allow'
      Egress: 'true'
      CidrBlock: '0.0.0.0/0'
      PortRange:
        From: '-1'
        To: '-1'
  rNaclAssocPrivSubnet1:
    Condition: cCreatePrivSub1
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref rPrivateTierSubnetsNacl
      SubnetId: !Ref rPrivSubAz1
  rNaclAssocPrivSubnet2:
    Condition: cCreatePrivSub2
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref rPrivateTierSubnetsNacl
      SubnetId: !Ref rPrivSubAz2
  rNaclAssocPrivSubnet3:
    Condition: cCreatePrivSub3
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref rPrivateTierSubnetsNacl
      SubnetId: !Ref rPrivSubAz3

# Create NACLs for Management subnets
  rManagementTierSubnetsNacl:
    Condition: cCreateMgmtResources
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref rMainVPC
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref pAppName, !Ref pEnvName, !Ref 'AWS::Region', 'mgmt', 'nacl']]
        - Key: SWA:Name
          Value: !Join ['-', [!Ref pAppName, !Ref pEnvName, !Ref 'AWS::Region', 'mgmt', 'nacl']]
        - Key: SWA:CostCenter
          Value: !Ref pCostCenter
        - Key: SWA:PID
          Value: !Ref pPID
        - Key: SWA:Confidentiality
          Value: !Ref pConfidentiality
        - Key: SWA:Compliance
          Value: !Ref pCompliance
        - Key: SWA:BusinessService
          Value: !Ref pBusinessService
        - Key: SWA:Environment
          Value: !Ref pEnvName
  rManagementTierSubnetsNaclIn:
    Condition: cCreateMgmtResources
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref rManagementTierSubnetsNacl
      RuleNumber: '100'
      Protocol: '-1'
      RuleAction: 'allow'
      Egress: 'false'
      CidrBlock: '0.0.0.0/0'
      PortRange:
        From: '-1'
        To: '-1'
  rManagementTierSubnetsNaclOut:
    Condition: cCreateMgmtResources
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref rManagementTierSubnetsNacl
      RuleNumber: '100'
      Protocol: '-1'
      RuleAction: 'allow'
      Egress: 'true'
      CidrBlock: '0.0.0.0/0'
      PortRange:
        From: '-1'
        To: '-1'
  rNaclAssocMgmtSubnet1:
    Condition: cCreateMgmtSub1
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref rManagementTierSubnetsNacl
      SubnetId: !Ref rMgmtSubAz1
  rNaclAssocMgmtSubnet2:
    Condition: cCreateMgmtSub2
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref rManagementTierSubnetsNacl
      SubnetId: !Ref rMgmtSubAz2
  rNaclAssocMgmtSubnet3:
    Condition: cCreateMgmtSub3
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref rManagementTierSubnetsNacl
      SubnetId: !Ref rMgmtSubAz3

# Create NACLs for Data subnets
  rDataTierSubnetsNacl:
    Condition: cCreateDataResources
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref rMainVPC
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref pAppName, !Ref pEnvName, !Ref 'AWS::Region', 'data', 'nacl']]
        - Key: SWA:Name
          Value: !Join ['-', [!Ref pAppName, !Ref pEnvName, !Ref 'AWS::Region', 'data', 'nacl']]
        - Key: SWA:CostCenter
          Value: !Ref pCostCenter
        - Key: SWA:PID
          Value: !Ref pPID
        - Key: SWA:Confidentiality
          Value: !Ref pConfidentiality
        - Key: SWA:Compliance
          Value: !Ref pCompliance
        - Key: SWA:BusinessService
          Value: !Ref pBusinessService
        - Key: SWA:Environment
          Value: !Ref pEnvName
  rDataTierSubnetsNaclIn:
    Condition: cCreateDataResources
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref rDataTierSubnetsNacl
      RuleNumber: '100'
      Protocol: '-1'
      RuleAction: 'allow'
      Egress: 'false'
      CidrBlock: '0.0.0.0/0'
      PortRange:
        From: '-1'
        To: '-1'
  rDataTierSubnetsNaclOut:
    Condition: cCreateDataResources
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref rDataTierSubnetsNacl
      RuleNumber: '100'
      Protocol: '-1'
      RuleAction: 'allow'
      Egress: 'true'
      CidrBlock: '0.0.0.0/0'
      PortRange:
        From: '-1'
        To: '-1'
  rNaclAssocDataSubnet1:
    Condition: cCreateDataSub1
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref rDataTierSubnetsNacl
      SubnetId: !Ref rDataSubAz1
  rNaclAssocDataSubnet2:
    Condition: cCreateDataSub2
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref rDataTierSubnetsNacl
      SubnetId: !Ref rDataSubAz2
  rNaclAssocDataSubnet3:
    Condition: cCreateDataSub3
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref rDataTierSubnetsNacl
      SubnetId: !Ref rDataSubAz3

  # Create a security group that allow access for SSH for all SWA internal and external CIDR blocks
  rSecurityGroupDefaultSSH:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Join ['-', [!Ref pAppName, !Ref pEnvName, !Ref 'AWS::Region', 'default-ssh-sec-group']]
      GroupDescription: Allow SSH from SWA internal and external CIDRs
      VpcId:
        Ref: rMainVPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 10.0.0.0/8
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 172.16.0.0/12
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 192.168.0.0/16
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 208.94.155.0/24
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 64.124.45.40/29
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 65.170.41.0/24
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 209.94.154.0/24
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 208.8.57.0/25
      SecurityGroupEgress:
      - IpProtocol: -1
        CidrIp: 0.0.0.0/0

Outputs:
  VpcId:
    Description: 'The VPC ID of this VPC'
    Value: !Ref rMainVPC
    Export:
      Name: !Sub '${AWS::StackName}-VpcId'
  VpcCidrBlock:
    Description: 'VPC CIDR Block'
    Value: !Ref pVpcCidrBlock
    Export:
      Name: !Sub '${AWS::StackName}-VpcCidrBlock'
  PublicSubnet1Id:
    Condition: cCreatePublSub1
    Description: 'The ID of Public Subnet AZ 1'
    Value: !Ref rPublSubAz1
    Export:
      Name: !Sub '${AWS::StackName}-PubSub1Id'
  PublicSubnet2Id:
    Condition: cCreatePublSub2
    Description: 'Public Subnet 2 ID'
    Value: !Ref rPublSubAz2
    Export:
      Name: !Sub '${AWS::StackName}-PubSub2Id'
  PublicSubnet3Id:
    Condition: cCreatePublSub3
    Description: 'Public Subnet 3 ID'
    Value: !Ref rPublSubAz3
    Export:
      Name: !Sub '${AWS::StackName}-PubSub3Id'
  PublicSubnetsRouteTable:
    Condition: cCreatePublResources
    Description: 'Public Subnet Route Table ID'
    Value: !Ref rPublSubRt
    Export:
      Name: !Sub '${AWS::StackName}-PubRTId'
  ManagementSubnet1Id:
    Condition: cCreateMgmtSub1
    Description: 'Management Subnet 1 ID'
    Value: !Ref rMgmtSubAz1
    Export:
      Name: !Sub '${AWS::StackName}-MgmtSub1Id'
  ManagementSubnet2Id:
    Condition: cCreateMgmtSub2
    Description: 'Management Subnet 2 ID'
    Value: !Ref rMgmtSubAz2
    Export:
      Name: !Sub '${AWS::StackName}-MgmtSub2Id'
  ManagementSubnet3Id:
    Condition: cCreateMgmtSub3
    Description: 'Management Subnet 3 ID'
    Value: !Ref rMgmtSubAz3
    Export:
      Name: !Sub '${AWS::StackName}-MgmtSub3Id'
  ManagementSubnetRouteTableAZ1:
    Condition: cCreateMgmtSub1
    Description: 'Management Subnet Route Table ID of AZ 1'
    Value: !Ref rMgmtSubRtAz1
    Export:
      Name: !Sub '${AWS::StackName}-MgmtRT1Id'
  ManagementSubnetRouteTableAZ2:
    Condition: cCreateMgmtSub2
    Description: 'Management Subnet Route Table ID of AZ 2'
    Value: !Ref rMgmtSubRtAz2
    Export:
      Name: !Sub '${AWS::StackName}-MgmtRT2Id'
  ManagementSubnetRouteTableAZ3:
    Condition: cCreateMgmtSub3
    Description: 'Management Subnet Route Table ID of AZ 3'
    Value: !Ref rMgmtSubRtAz3
    Export:
      Name: !Sub '${AWS::StackName}-MgmtRT3Id'
  PrivateSubnet1Id:
    Condition: cCreatePrivSub1
    Description: 'Private Subnet 1 ID'
    Value: !Ref rPrivSubAz1
    Export:
      Name: !Sub '${AWS::StackName}-PrivSub1Id'
  PrivateSubnet2Id:
    Condition: cCreatePrivSub2
    Description: 'Private Subnet 2 ID'
    Value: !Ref rPrivSubAz2
    Export:
      Name: !Sub '${AWS::StackName}-PrivSub2Id'
  PrivateSubnet3Id:
    Condition: cCreatePrivSub3
    Description: 'Private Subnet 3 ID'
    Value: !Ref rPrivSubAz3
    Export:
      Name: !Sub '${AWS::StackName}-PrivSub3Id'
  PrivateSubnetRouteTableAZ1:
    Condition: cCreatePrivSub1
    Description: 'Private Subnet Route Table ID of AZ 1'
    Value: !Ref rPrivSubRtAz1
    Export:
      Name: !Sub '${AWS::StackName}-PrivRT1Id'
  PrivateSubnetRouteTableAZ2:
    Condition: cCreatePrivSub2
    Description: 'Private Subnet Route Table ID of AZ 2'
    Value: !Ref rPrivSubRtAz2
    Export:
      Name: !Sub '${AWS::StackName}-PrivRT2Id'
  PrivateSubnetRouteTableAZ3:
    Condition: cCreatePrivSub3
    Description: 'Private Subnet Route Table ID of AZ 3'
    Value: !Ref rPrivSubRtAz3
    Export:
      Name: !Sub '${AWS::StackName}-PrivRT3Id'
  DataSubnet1Id:
    Condition: cCreateDataSub1
    Description: 'Data Subnet 1 ID'
    Value: !Ref rDataSubAz1
    Export:
      Name: !Sub '${AWS::StackName}-DataSub1Id'
  DataSubnet2Id:
    Condition: cCreateDataSub2
    Description: 'Data Subnet 2 ID'
    Value: !Ref rDataSubAz2
    Export:
      Name: !Sub '${AWS::StackName}-DataSub2Id'
  DataSubnet3Id:
    Condition: cCreateDataSub3
    Description: 'Data Subnet 3 ID'
    Value: !Ref rDataSubAz3
    Export:
      Name: !Sub '${AWS::StackName}-DataSub3Id'
  DataSubnetRouteTableAZ:
    Condition: cCreateDataResources
    Description: 'Data Subnet Route Table ID'
    Value: !Ref rDataSubRt
    Export:
      Name: !Sub '${AWS::StackName}-DataRtId'