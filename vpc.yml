# The variables used in the vpc template are named with the following convention
#   Variables that start with a c are conditions
#   Variables that start with a r are resources
#   Variables that do not start with the above are parameters or outputs

AWSTemplateFormatVersion: '2010-09-09'
Description: 'Creates VPC and its base resources, across 3 AZs: VPC, Subnets, Routes tables, and NACLs.'

Conditions:
  cCreatePublicSub1: !Not [!Equals [!Ref PublicSubAz1, '']]
  cCreatePublicSub2: !Not [!Equals [!Ref PublicSubAz2, '']]
  cCreatePublicSub3: !Not [!Equals [!Ref PublicSubAz3, '']]
  cCreatePublicResources: !Or
    - !Condition cCreatePublicSub1
    - !Condition cCreatePublicSub2
    - !Condition cCreatePublicSub3

  cCreatePrivateSub1: !Not [!Equals [!Ref PrivateSubAz1, '']]
  cCreatePrivateSub2: !Not [!Equals [!Ref PrivateSubAz2, '']]
  cCreatePrivateSub3: !Not [!Equals [!Ref PrivateSubAz3, '']]
  cCreatePrivateResources: !Or
    - !Condition cCreatePrivateSub1
    - !Condition cCreatePrivateSub2
    - !Condition cCreatePrivateSub3

  cCreateDataSub1: !Not [!Equals [!Ref DataSubAz1, '']]
  cCreateDataSub2: !Not [!Equals [!Ref DataSubAz2, '']]
  cCreateDataSub3: !Not [!Equals [!Ref DataSubAz3, '']]
  cCreateDataResources: !Or
    - !Condition cCreateDataSub1
    - !Condition cCreateDataSub2
    - !Condition cCreateDataSub3

Parameters:
  VpcCidrBlock:
    Type: String
    Description: VPC CIDR Block
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})\/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  PrivateSubAz1:
    Type: String
    Default: ''
    AllowedPattern: '|(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})\/(\d{1,2})'
    Description: 'Private Subnet Cidr for AZ1'
  PrivateSubAz2:
    Type: String
    Default: ''
    AllowedPattern: '|(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})\/(\d{1,2})'
    Description: 'Private Subnet Cidr for AZ2'
  PrivateSubAz3:
    Type: String
    Default: ''
    AllowedPattern: '|(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})\/(\d{1,2})'
    Description: 'Private Subnet Cidr for AZ3'
  PublicSubAz1:
    Type: String
    Default: ''
    AllowedPattern: '|(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})\/(\d{1,2})'
    Description: 'Public Subnet Cidr for AZ1'
  PublicSubAz2:
    Type: String
    Default: ''
    AllowedPattern: '|(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})\/(\d{1,2})'
    Description: 'Public Subnet Cidr for AZ2'
  PublicSubAz3:
    Type: String
    Default: ''
    AllowedPattern: '|(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})\/(\d{1,2})'
    Description: 'Public Subnet Cidr for AZ3'
  DataSubAz1:
    Type: String
    Default: ''
    AllowedPattern: '|(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})\/(\d{1,2})'
    Description: 'Data Subnet Cidr for AZ1'
  DataSubAz2:
    Type: String
    Default: ''
    AllowedPattern: '|(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})\/(\d{1,2})'
    Description: 'Data Subnet Cidr for AZ2'
  DataSubAz3:
    Type: String
    Default: ''
    AllowedPattern: '|(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})\/(\d{1,2})'
    Description: 'Data Subnet Cidr for AZ3'
  AppName:
    Type: String
    Description: 'The Name of the Application'

Mappings:
  RegionMap: 
    us-east-1:
      domainName: ec2.internal
    us-west-2:
      domainName: us-west-2.compute.internal

Resources:
# Create VPC
  rMainVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidrBlock
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref AppName, !Ref 'AWS::Region', 'vpc']]

# Replace egress for the default security group to prevent usage
  rDefaultSecurityGroupEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      CidrIp: 0.0.0.0/32
      Description: Change of Egress in the Default Security Group to prevent any usage
      GroupId: !GetAtt rMainVPC.DefaultSecurityGroup
      FromPort: 1
      ToPort: 1
      IpProtocol: tcp

# Create DHCP Options for AmazonprovidedDNS
  rDhcpOptions: 
    Type: AWS::EC2::DHCPOptions
    Properties: 
      DomainName: !FindInMap [RegionMap, !Ref "AWS::Region", domainName]
      DomainNameServers: 
        - AmazonProvidedDNS

# Create default DHCP Option set for VPC
  rVpcDhcpOptionsAssociation:
    Type: AWS::EC2::VPCDHCPOptionsAssociation
    Properties:
      DhcpOptionsId: !Ref rDhcpOptions
      VpcId: !Ref rMainVPC

# Create the NAT Gateways for Private subnets in AZ1, AZ2 and/or AZ3 if needed
  rNatGatewayAz1:
    Condition: cCreatePublicSub1
    DependsOn: rVpcGatewayAttachment
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
          - rNatGatewayEipAz1
          - AllocationId
      SubnetId: !Ref rPublicSubAz1
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref AppName, !Ref 'AWS::Region', 'natgw1']]
  rNatGatewayEipAz1:
    Condition: cCreatePublicSub1
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  rNatGatewayAz2:
    Condition: cCreatePublicSub2
    DependsOn: rVpcGatewayAttachment
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
          - rNatGatewayEipAz2
          - AllocationId
      SubnetId: !Ref rPublicSubAz2
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref AppName, !Ref 'AWS::Region', 'natgw2']]
  rNatGatewayEipAz2:
    Condition: cCreatePublicSub2
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  rNatGatewayAz3:
    Condition: cCreatePublicSub3
    DependsOn: rVpcGatewayAttachment
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
          - rNatGatewayEipAz3
          - AllocationId
      SubnetId: !Ref rPublicSubAz3
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref AppName, !Ref 'AWS::Region', 'natgw3']]
  rNatGatewayEipAz3:
    Condition: cCreatePublicSub3
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

# Create Public subnets and routes for AZ1, AZ2 and/or AZ3 if requested
  rPublicSubAz1:
    Condition: cCreatePublicSub1
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select ['0', !GetAZs '']
      CidrBlock: !Ref PublicSubAz1
      VpcId: !Ref rMainVPC
      MapPublicIpOnLaunch: 'true'
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref AppName, 'pub', !Select ['0', !GetAZs ''], 'subnet']]
  rPublicSubAz2:
    Condition: cCreatePublicSub2
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select ['1', !GetAZs '']
      CidrBlock: !Ref PublicSubAz2
      VpcId: !Ref rMainVPC
      MapPublicIpOnLaunch: 'true'
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref AppName, 'pub', !Select ['1', !GetAZs ''], 'subnet']]
  rPublicSubAz3:
    Condition: cCreatePublicSub3
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select ['2', !GetAZs '']
      CidrBlock: !Ref PublicSubAz3
      VpcId: !Ref rMainVPC
      MapPublicIpOnLaunch: 'true'
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref AppName, 'pub', !Select ['2', !GetAZs ''], 'subnet']]
  rPublicSubRt:
    Condition: cCreatePublicResources
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref rMainVPC
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref AppName, 'pub', 'rt']]
  rPublicSubnet1RouteTableAssociation:
    Condition: cCreatePublicSub1
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref rPublicSubRt
      SubnetId: !Ref rPublicSubAz1
  rPublicSubnet2RouteTableAssociation:
    Condition: cCreatePublicSub2
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref rPublicSubRt
      SubnetId: !Ref rPublicSubAz2
  rPublicSubnet3RouteTableAssociation:
    Condition: cCreatePublicSub3
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref rPublicSubRt
      SubnetId: !Ref rPublicSubAz3

# Create the Internet Gateway for public subnets if any were created
  rInternetGateway:
    Condition: cCreatePublicResources
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref AppName, !Ref 'AWS::Region', 'igw']]
  rVpcGatewayAttachment:
    Condition: cCreatePublicResources
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref rInternetGateway
      VpcId: !Ref rMainVPC

# Create Private subnets and routes or AZ1, AZ2 and/or AZ3 if requested
  rPrivateSubAz1:
    Condition: cCreatePrivateSub1
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select ['0', !GetAZs '']
      CidrBlock: !Ref PrivateSubAz1
      VpcId: !Ref rMainVPC
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref AppName, 'priv', !Select ['0', !GetAZs ''], 'subnet']]
  rPrivateSubAz2:
    Condition: cCreatePrivateSub2
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select ['1', !GetAZs '']
      CidrBlock: !Ref PrivateSubAz2
      VpcId: !Ref rMainVPC
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref AppName, 'priv', !Select ['1', !GetAZs ''], 'subnet']]
  rPrivateSubAz3:
    Condition: cCreatePrivateSub3
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select ['2', !GetAZs '']
      CidrBlock: !Ref PrivateSubAz3
      VpcId: !Ref rMainVPC
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref AppName, 'priv', !Select ['2', !GetAZs ''], 'subnet']]
  rPrivateSubRtAz1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref rMainVPC
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref AppName, 'priv', !Select ['0', !GetAZs ''], 'rt']]
  rPrivateSubRtAz2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref rMainVPC
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref AppName, 'priv', !Select ['1', !GetAZs ''], 'rt']]
  rPrivateSubRtAz3:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref rMainVPC
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref AppName, 'priv', !Select ['2', !GetAZs ''], 'rt']]
  rPrivateSubnet1RouteTableAssociation:
    Condition: cCreatePrivateSub1
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref rPrivateSubRtAz1
      SubnetId: !Ref rPrivateSubAz1
  rPrivateSubnet2RouteTableAssociation:
    Condition: cCreatePrivateSub2
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref rPrivateSubRtAz2
      SubnetId: !Ref rPrivateSubAz2
  rPrivateSubnet3RouteTableAssociation:
    Condition: cCreatePrivateSub3
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref rPrivateSubRtAz3
      SubnetId: !Ref rPrivateSubAz3

# Create Data subnets and routes or AZ1, AZ2 and/or AZ3 if requested
  rDataSubAz1:
    Condition: cCreateDataSub1
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select ['0', !GetAZs '']
      CidrBlock: !Ref DataSubAz1
      VpcId: !Ref rMainVPC
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref AppName, 'data', !Select ['0', !GetAZs ''], 'subnet']]
  rDataSubAz2:
    Condition: cCreateDataSub2
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select ['1', !GetAZs '']
      CidrBlock: !Ref DataSubAz2
      VpcId: !Ref rMainVPC
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref AppName, 'data', !Select ['1', !GetAZs ''], 'subnet']]
  rDataSubAz3:
    Condition: cCreateDataSub3
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select ['2', !GetAZs '']
      CidrBlock: !Ref DataSubAz3
      VpcId: !Ref rMainVPC
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref AppName, 'data', !Select ['2', !GetAZs ''], 'subnet']]
  rDataSubRt:
    Condition: cCreateDataResources
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref rMainVPC
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref AppName, 'data', 'rt']]
  rDataSubnet1RouteTableAssociation:
    Condition: cCreateDataSub1
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref rDataSubRt
      SubnetId: !Ref rDataSubAz1
  rDataSubnet2RouteTableAssociation:
    Condition: cCreateDataSub2
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref rDataSubRt
      SubnetId: !Ref rDataSubAz2
  rDataSubnet3RouteTableAssociation:
    Condition: cCreateDataSub3
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref rDataSubRt
      SubnetId: !Ref rDataSubAz3

# Create the Public tier default route (0.0.0.0/0) to internet gateway
  rPublicTierDefaultRoute:
    Condition: cCreatePublicResources
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref rPublicSubRt
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref rInternetGateway

# Create the Private tier default routes (0.0.0.0/0) from each AZ back to NAT gateways
  rPrivateTierDefaultRouteAZ1:
    Condition: cCreatePublicSub1
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref rPrivateSubRtAz1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref rNatGatewayAz1
  rPrivateTierDefaultRouteAZ2:
    Condition: cCreatePublicSub2
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref rPrivateSubRtAz2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref rNatGatewayAz2
  rPrivateTierDefaultRouteAZ3:
    Condition: cCreatePublicSub3
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref rPrivateSubRtAz3
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref rNatGatewayAz3

# Create NACLs for Public subnets
  rPublicTierSubnetsNacl:
    Condition: cCreatePublicResources
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref rMainVPC
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref AppName, !Ref 'AWS::Region', 'pub', 'nacl']]
  rPublicTierSubnetsNaclIn:
    Condition: cCreatePublicResources
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref rPublicTierSubnetsNacl
      RuleNumber: '100'
      Protocol: '-1'
      RuleAction: 'allow'
      CidrBlock: '0.0.0.0/0'
      PortRange:
        From: '-1'
        To: '-1'
  rPublicTierSubnetsNaclOut:
    Condition: cCreatePublicResources
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref rPublicTierSubnetsNacl
      RuleNumber: '100'
      Protocol: '-1'
      RuleAction: 'allow'
      Egress: 'true'
      CidrBlock: '0.0.0.0/0'
      PortRange:
        From: '-1'
        To: '-1'
  rNaclAssocPubSubnet1:
    Condition: cCreatePublicSub1
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref rPublicTierSubnetsNacl
      SubnetId: !Ref rPublicSubAz1
  rNaclAssocPubSubnet2:
    Condition: cCreatePublicSub2
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref rPublicTierSubnetsNacl
      SubnetId: !Ref rPublicSubAz2
  rNaclAssocPubSubnet3:
    Condition: cCreatePublicSub3
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref rPublicTierSubnetsNacl
      SubnetId: !Ref rPublicSubAz3

# Create NACLs for Private subnets
  rPrivateTierSubnetsNacl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref rMainVPC
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref AppName, !Ref 'AWS::Region', 'priv', 'nacl']]
  rPrivateTierSubnetsNaclIn:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref rPrivateTierSubnetsNacl
      RuleNumber: '100'
      Protocol: '-1'
      RuleAction: 'allow'
      Egress: 'false'
      CidrBlock: '0.0.0.0/0'
      PortRange:
        From: '-1'
        To: '-1'
  rPrivateTierSubnetsNaclOut:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref rPrivateTierSubnetsNacl
      RuleNumber: '100'
      Protocol: '-1'
      RuleAction: 'allow'
      Egress: 'true'
      CidrBlock: '0.0.0.0/0'
      PortRange:
        From: '-1'
        To: '-1'
  rNaclAssocPrivateSubnet1:
    Condition: cCreatePrivateSub1
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref rPrivateTierSubnetsNacl
      SubnetId: !Ref rPrivateSubAz1
  rNaclAssocPrivateSubnet2:
    Condition: cCreatePrivateSub2
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref rPrivateTierSubnetsNacl
      SubnetId: !Ref rPrivateSubAz2
  rNaclAssocPrivateSubnet3:
    Condition: cCreatePrivateSub3
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref rPrivateTierSubnetsNacl
      SubnetId: !Ref rPrivateSubAz3

# Create NACLs for Data subnets
  rDataTierSubnetsNacl:
    Condition: cCreateDataResources
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref rMainVPC
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref AppName, !Ref 'AWS::Region', 'data', 'nacl']]
  rDataTierSubnetsNaclIn:
    Condition: cCreateDataResources
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref rDataTierSubnetsNacl
      RuleNumber: '100'
      Protocol: '-1'
      RuleAction: 'allow'
      Egress: 'false'
      CidrBlock: '0.0.0.0/0'
      PortRange:
        From: '-1'
        To: '-1'
  rDataTierSubnetsNaclOut:
    Condition: cCreateDataResources
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref rDataTierSubnetsNacl
      RuleNumber: '100'
      Protocol: '-1'
      RuleAction: 'allow'
      Egress: 'true'
      CidrBlock: '0.0.0.0/0'
      PortRange:
        From: '-1'
        To: '-1'
  rNaclAssocDataSubnet1:
    Condition: cCreateDataSub1
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref rDataTierSubnetsNacl
      SubnetId: !Ref rDataSubAz1
  rNaclAssocDataSubnet2:
    Condition: cCreateDataSub2
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref rDataTierSubnetsNacl
      SubnetId: !Ref rDataSubAz2
  rNaclAssocDataSubnet3:
    Condition: cCreateDataSub3
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref rDataTierSubnetsNacl
      SubnetId: !Ref rDataSubAz3


Outputs:
  VpcId:
    Description: 'The VPC ID of this VPC'
    Value: !Ref rMainVPC
    Export:
      Name: !Sub '${AWS::StackName}-VpcId'
  VpcCidrBlock:
    Description: 'VPC CIDR Block'
    Value: !Ref VpcCidrBlock
    Export:
      Name: !Sub '${AWS::StackName}-VpcCidrBlock'
  PublicSubnet1Id:
    Condition: cCreatePublicSub1
    Description: 'The ID of Public Subnet AZ 1'
    Value: !Ref rPublicSubAz1
    Export:
      Name: !Sub '${AWS::StackName}-PubSub1Id'
  PublicSubnet2Id:
    Condition: cCreatePublicSub2
    Description: 'Public Subnet 2 ID'
    Value: !Ref rPublicSubAz2
    Export:
      Name: !Sub '${AWS::StackName}-PubSub2Id'
  PublicSubnet3Id:
    Condition: cCreatePublicSub3
    Description: 'Public Subnet 3 ID'
    Value: !Ref rPublicSubAz3
    Export:
      Name: !Sub '${AWS::StackName}-PubSub3Id'
  PublicSubnetsRouteTable:
    Condition: cCreatePublicResources
    Description: 'Public Subnet Route Table ID'
    Value: !Ref rPublicSubRt
    Export:
      Name: !Sub '${AWS::StackName}-PubRTId'
  PrivateSubnet1Id:
    Condition: cCreatePrivateSub1
    Description: 'Private Subnet 1 ID'
    Value: !Ref rPrivateSubAz1
    Export:
      Name: !Sub '${AWS::StackName}-PrivateSub1Id'
  PrivateSubnet2Id:
    Condition: cCreatePrivateSub2
    Description: 'Private Subnet 2 ID'
    Value: !Ref rPrivateSubAz2
    Export:
      Name: !Sub '${AWS::StackName}-PrivateSub2Id'
  PrivateSubnet3Id:
    Condition: cCreatePrivateSub3
    Description: 'Private Subnet 3 ID'
    Value: !Ref rPrivateSubAz3
    Export:
      Name: !Sub '${AWS::StackName}-PrivateSub3Id'
  PrivateSubnetRouteTableAZ1:
    Condition: cCreatePrivateSub1
    Description: 'Private Subnet Route Table ID of AZ 1'
    Value: !Ref rPrivateSubRtAz1
    Export:
      Name: !Sub '${AWS::StackName}-PrivRT1Id'
  PrivateSubnetRouteTableAZ2:
    Condition: cCreatePrivateSub2
    Description: 'Private Subnet Route Table ID of AZ 2'
    Value: !Ref rPrivateSubRtAz2
    Export:
      Name: !Sub '${AWS::StackName}-PrivRT2Id'
  PrivateSubnetRouteTableAZ3:
    Condition: cCreatePrivateSub2
    Description: 'Private Subnet Route Table ID of AZ 3'
    Value: !Ref rPrivateSubRtAz3
    Export:
      Name: !Sub '${AWS::StackName}-PrivRT3Id'
  DataSubnet1Id:
    Condition: cCreateDataSub1
    Description: 'Data Subnet 1 ID'
    Value: !Ref rDataSubAz1
    Export:
      Name: !Sub '${AWS::StackName}-DataSub1Id'
  DataSubnet2Id:
    Condition: cCreateDataSub2
    Description: 'Data Subnet 2 ID'
    Value: !Ref rDataSubAz2
    Export:
      Name: !Sub '${AWS::StackName}-DataSub2Id'
  DataSubnet3Id:
    Condition: cCreateDataSub3
    Description: 'Data Subnet 3 ID'
    Value: !Ref rDataSubAz3
    Export:
      Name: !Sub '${AWS::StackName}-DataSub3Id'
  DataSubnetRouteTableAZ:
    Condition: cCreateDataResources
    Description: 'Data Subnet Route Table ID'
    Value: !Ref rDataSubRt
    Export:
      Name: !Sub '${AWS::StackName}-DataRtId'
