# The variables used in the vpc template are named with the following convention
#   Variables that start with a c are conditions
#   Variables that start with a r are resources
#   Variables that do not start with the above are parameters or outputs

AWSTemplateFormatVersion: '2010-09-09'
Description: 'Creates VPC and its base resources, across 3 AZs: VPC, Subnets, Routes tables, and NACLs.'

Conditions:
  cCreatePublicSub1: !Not [!Equals [!Ref PublicSubAz1, '']]
  cCreatePublicSub2: !Not [!Equals [!Ref PublicSubAz2, '']]
  cCreatePublicSub3: !Not [!Equals [!Ref PublicSubAz3, '']]
  cCreatePublicResources: !Or
    - !Condition cCreatePublicSub1
    - !Condition cCreatePublicSub2
    - !Condition cCreatePublicSub3

  cCreateDataSub1: !Not [!Equals [!Ref DataSubAz1, '']]
  cCreateDataSub2: !Not [!Equals [!Ref DataSubAz2, '']]
  cCreateDataSub3: !Not [!Equals [!Ref DataSubAz3, '']]
  cCreateDataResources: !Or
    - !Condition cCreateDataSub1
    - !Condition cCreateDataSub2
    - !Condition cCreateDataSub3

  cConfigureDirectConnect: !Equals [!Ref ConfigureDirectConnect, true]
  cNotLabEnvironment: !Not [!Equals [!Ref EnvName, lab]]
  cCreateVGW: !And
    - !Condition cConfigureDirectConnect
    - !Condition cNotLabEnvironment

  cVGWforPublic: !And
    - !Condition cCreateVGW
    - !Condition cCreatePublicResources

  cVGWforData: !And
    - !Condition cCreateVGW
    - !Condition cCreateDataResources


Parameters:
  VpcCidrBlock:
    Type: String
    Description: VPC CIDR Block
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})\/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  PrivateSubAz1:
    Type: String
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})\/(\d{1,2})'
    Description: 'Private Subnet Cidr for AZ1'
  PrivateSubAz2:
    Type: String
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})\/(\d{1,2})'
    Description: 'Private Subnet Cidr for AZ2'
  PrivateSubAz3:
    Type: String
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})\/(\d{1,2})'
    Description: 'Private Subnet Cidr for AZ3'
  PublicSubAz1:
    Type: String
    Default: ''
    AllowedPattern: '|(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})\/(\d{1,2})'
    Description: 'Public Subnet Cidr for AZ1'
  PublicSubAz2:
    Type: String
    Default: ''
    AllowedPattern: '|(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})\/(\d{1,2})'
    Description: 'Public Subnet Cidr for AZ2'
  PublicSubAz3:
    Type: String
    Default: ''
    AllowedPattern: '|(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})\/(\d{1,2})'
    Description: 'Public Subnet Cidr for AZ3'
  DataSubAz1:
    Type: String
    Default: ''
    AllowedPattern: '|(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})\/(\d{1,2})'
    Description: 'Data Subnet Cidr for AZ1'
  DataSubAz2:
    Type: String
    Default: ''
    AllowedPattern: '|(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})\/(\d{1,2})'
    Description: 'Data Subnet Cidr for AZ2'
  DataSubAz3:
    Type: String
    Default: ''
    AllowedPattern: '|(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})\/(\d{1,2})'
    Description: 'Data Subnet Cidr for AZ3'
  ConfigureDirectConnect:
    Type: String
    Default: false
    Description: 'Configure VPC to use Direct Connect'
    AllowedValues:
      - true
      - false
    ConstraintDescription: 'Must indicate true or false'
  CsrPreferredPath:
    Type: String
    Description: 'The preferred network path VPC to SWA (CSR1, CSR2)'
    Default: CSR1
    AllowedValues:
      - CSR1
      - CSR2
  InitiateSpoke:
    Type: String
    Description: 'initiate connection to direct connect'
    Default: true
    AllowedValues:
      - true
      - false
  AppName:
    Type: String
    Description: 'The Name of the Application'
  EnvName:
    Type: String
    Description: 'Environment Name - lab, dev, qa, prod'
    AllowedValues:
      - lab
      - dev
      - qa
      - prod
    ConstraintDescription: 'Must be lab, dev, qa, or prod'
  SWACostCenter:
    Type: String
    Description: 'Cost Center Number (5 digits)'
    AllowedPattern: '(\d{5})'
    ConstraintDescription: 'Must be in the format XXXXX (5 digits)'
  SWAPID:
    Type: String
    Description: 'IT-XXXXX... or IO-XXXXX... (minimum 5 digits)'
    AllowedPattern: '(IT-\d{5,})|(IO-\d{5,})'
    ConstraintDescription: 'Must be in the format IT-XXXXX... or IO-XXXXX... (minimum 5 digits)'
  SWAConfidentiality:
    Type: String
    Description: 'SWA Public, SWA Internal, SWA Confidential'
    AllowedValues:
      - SWA Public
      - SWA Internal
      - SWA Confidential
  SWACompliance:
    Type: String
    Description: 'PCI, PII, NA'
    AllowedValues:
      - NA
      - PII
      - PCI
  SWABusinessService:
    Type: String
    Description: 'Booking, CheckIn, Manage irregular operations'


Resources:
# Create VPC
  rMainVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidrBlock
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref AppName, !Ref EnvName, !Ref 'AWS::Region', 'vpc']]
        - Key: SWA:Name
          Value: !Join ['-', [!Ref AppName, !Ref EnvName, !Ref 'AWS::Region', 'vpc']]
        - Key: SWA:SWACostCenter
          Value: !Ref SWACostCenter
        - Key: SWA:PID
          Value: !Ref SWAPID
        - Key: SWA:Confidentiality
          Value: !Ref SWAConfidentiality
        - Key: SWA:Compliance
          Value: !Ref SWACompliance
        - Key: SWA:BusinessService
          Value: !Ref SWABusinessService
        - Key: SWA:Environment
          Value: !Ref EnvName

# Create deafult DHCP Option set for VPC
  rVpcDhcpOptionsAssociation:
    Type: AWS::EC2::VPCDHCPOptionsAssociation
    Properties:
      DhcpOptionsId: default
      VpcId: !Ref rMainVPC

# Set up VPC for Direct Connect if reuqested
  rVirtualPrivateGateway:
    Condition: cCreateVGW
    Type: AWS::EC2::VPNGateway
    Properties:
      Type: 'ipsec.1'
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref AppName, !Ref EnvName, !Ref 'AWS::Region', 'vgw']]
        - Key: SWA:Name
          Value: !Join ['-', [!Ref AppName, !Ref EnvName, !Ref 'AWS::Region', 'vgw']]
        - Key: SWA:SWACostCenter
          Value: !Ref SWACostCenter
        - Key: SWA:PID
          Value: !Ref SWAPID
        - Key: SWA:Confidentiality
          Value: !Ref SWAConfidentiality
        - Key: SWA:Compliance
          Value: !Ref SWACompliance
        - Key: SWA:BusinessService
          Value: !Ref SWABusinessService
        - Key: SWA:Environment
          Value: !Ref EnvName
        - Key: !Join  ['', [!Ref EnvName, '-transitVPC:', !Ref 'AWS::Region', ':preferred-path']]
          Value: !Ref CsrPreferredPath
        - Key: !Join  ['', [!Ref EnvName, '-transitVPC:', !Ref 'AWS::Region', ':spoke']]
          Value: !Ref InitiateSpoke

  rVirtualPrivateGatewayAttachment:
    Condition: cCreateVGW
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref rMainVPC
      VpnGatewayId: !Ref rVirtualPrivateGateway

# Create the NAT Gateways for Private subnets in AZ1, AZ2 and/or AZ3 if needed
  rNatGatewayAz1:
    Condition: cCreatePublicSub1
    DependsOn: rVpcGatewayAttachment
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
          - rNatGatewayEipAz1
          - AllocationId
      SubnetId: !Ref rPublicSubAz1
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref AppName, !Ref EnvName, !Ref 'AWS::Region', 'natgw1']]
        - Key: SWA:Name
          Value: !Join ['-', [!Ref AppName, !Ref EnvName, !Ref 'AWS::Region', 'natgw1']]
        - Key: SWA:SWACostCenter
          Value: !Ref SWACostCenter
        - Key: SWA:PID
          Value: !Ref SWAPID
        - Key: SWA:Confidentiality
          Value: !Ref SWAConfidentiality
        - Key: SWA:Compliance
          Value: !Ref SWACompliance
        - Key: SWA:BusinessService
          Value: !Ref SWABusinessService
        - Key: SWA:Environment
          Value: !Ref EnvName
  rNatGatewayEipAz1:
    Condition: cCreatePublicSub1
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  rNatGatewayAz2:
    Condition: cCreatePublicSub2
    DependsOn: rVpcGatewayAttachment
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
          - rNatGatewayEipAz2
          - AllocationId
      SubnetId: !Ref rPublicSubAz2
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref AppName, !Ref EnvName, !Ref 'AWS::Region', 'natgw2']]
        - Key: SWA:Name
          Value: !Join ['-', [!Ref AppName, !Ref EnvName, !Ref 'AWS::Region', 'natgw2']]
        - Key: SWA:SWACostCenter
          Value: !Ref SWACostCenter
        - Key: SWA:PID
          Value: !Ref SWAPID
        - Key: SWA:Confidentiality
          Value: !Ref SWAConfidentiality
        - Key: SWA:Compliance
          Value: !Ref SWACompliance
        - Key: SWA:BusinessService
          Value: !Ref SWABusinessService
        - Key: SWA:Environment
          Value: !Ref EnvName
  rNatGatewayEipAz2:
    Condition: cCreatePublicSub2
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  rNatGatewayAz3:
    Condition: cCreatePublicSub3
    DependsOn: rVpcGatewayAttachment
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
          - rNatGatewayEipAz3
          - AllocationId
      SubnetId: !Ref rPublicSubAz3
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref AppName, !Ref EnvName, !Ref 'AWS::Region', 'natgw3']]
        - Key: SWA:Name
          Value: !Join ['-', [!Ref AppName, !Ref EnvName, !Ref 'AWS::Region', 'natgw3']]
        - Key: SWA:SWACostCenter
          Value: !Ref SWACostCenter
        - Key: SWA:PID
          Value: !Ref SWAPID
        - Key: SWA:Confidentiality
          Value: !Ref SWAConfidentiality
        - Key: SWA:Compliance
          Value: !Ref SWACompliance
        - Key: SWA:BusinessService
          Value: !Ref SWABusinessService
        - Key: SWA:Environment
          Value: !Ref EnvName
  rNatGatewayEipAz3:
    Condition: cCreatePublicSub3
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

# Create Public subnets and routes or AZ1, AZ2 and/or AZ3 if requested
  rPublicSubAz1:
    Condition: cCreatePublicSub1
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select ['0', !GetAZs '']
      CidrBlock: !Ref PublicSubAz1
      MapPublicIpOnLaunch: false
      VpcId: !Ref rMainVPC
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref AppName, !Ref EnvName, 'pub', !Select ['0', !GetAZs ''], 'subnet']]
        - Key: SWA:Name
          Value: !Join ['-', [!Ref AppName, !Ref EnvName, 'pub', !Select ['0', !GetAZs ''], 'subnet']]
        - Key: SWA:SWACostCenter
          Value: !Ref SWACostCenter
        - Key: SWA:PID
          Value: !Ref SWAPID
        - Key: SWA:Confidentiality
          Value: !Ref SWAConfidentiality
        - Key: SWA:Compliance
          Value: !Ref SWACompliance
        - Key: SWA:BusinessService
          Value: !Ref SWABusinessService
        - Key: SWA:Environment
          Value: !Ref EnvName
  rPublicSubAz2:
    Condition: cCreatePublicSub2
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select ['1', !GetAZs '']
      CidrBlock: !Ref PublicSubAz2
      MapPublicIpOnLaunch: false
      VpcId: !Ref rMainVPC
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref AppName, !Ref EnvName, 'pub', !Select ['1', !GetAZs ''], 'subnet']]
        - Key: SWA:Name
          Value: !Join ['-', [!Ref AppName, !Ref EnvName, 'pub', !Select ['1', !GetAZs ''], 'subnet']]
        - Key: SWA:SWACostCenter
          Value: !Ref SWACostCenter
        - Key: SWA:PID
          Value: !Ref SWAPID
        - Key: SWA:Confidentiality
          Value: !Ref SWAConfidentiality
        - Key: SWA:Compliance
          Value: !Ref SWACompliance
        - Key: SWA:BusinessService
          Value: !Ref SWABusinessService
        - Key: SWA:Environment
          Value: !Ref EnvName
  rPublicSubAz3:
    Condition: cCreatePublicSub3
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select ['2', !GetAZs '']
      CidrBlock: !Ref PublicSubAz3
      MapPublicIpOnLaunch: false
      VpcId: !Ref rMainVPC
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref AppName, !Ref EnvName, 'pub', !Select ['2', !GetAZs ''], 'subnet']]
        - Key: SWA:Name
          Value: !Join ['-', [!Ref AppName, !Ref EnvName, 'pub', !Select ['2', !GetAZs ''], 'subnet']]
        - Key: SWA:SWACostCenter
          Value: !Ref SWACostCenter
        - Key: SWA:PID
          Value: !Ref SWAPID
        - Key: SWA:Confidentiality
          Value: !Ref SWAConfidentiality
        - Key: SWA:Compliance
          Value: !Ref SWACompliance
        - Key: SWA:BusinessService
          Value: !Ref SWABusinessService
        - Key: SWA:Environment
          Value: !Ref EnvName
  rPublicSubRt:
    Condition: cCreatePublicResources
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref rMainVPC
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref AppName, !Ref EnvName, 'pub', 'rt']]
        - Key: SWA:Name
          Value: !Join ['-', [!Ref AppName, !Ref EnvName, 'pub', 'rt']]
        - Key: SWA:SWACostCenter
          Value: !Ref SWACostCenter
        - Key: SWA:PID
          Value: !Ref SWAPID
        - Key: SWA:Confidentiality
          Value: !Ref SWAConfidentiality
        - Key: SWA:Compliance
          Value: !Ref SWACompliance
        - Key: SWA:BusinessService
          Value: !Ref SWABusinessService
        - Key: SWA:Environment
          Value: !Ref EnvName
  rPublicSubnet1RouteTableAssociation:
    Condition: cCreatePublicSub1
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref rPublicSubRt
      SubnetId: !Ref rPublicSubAz1
  rPublicSubnet2RouteTableAssociation:
    Condition: cCreatePublicSub2
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref rPublicSubRt
      SubnetId: !Ref rPublicSubAz2
  rPublicSubnet3RouteTableAssociation:
    Condition: cCreatePublicSub3
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref rPublicSubRt
      SubnetId: !Ref rPublicSubAz3

# Create the Internet Gateway for public subnets if any were created
  rInternetGateway:
    Condition: cCreatePublicResources
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref AppName, !Ref EnvName, !Ref 'AWS::Region', 'igw']]
        - Key: SWA:Name
          Value: !Join ['-', [!Ref AppName, !Ref EnvName, !Ref 'AWS::Region', 'igw']]
        - Key: SWA:SWACostCenter
          Value: !Ref SWACostCenter
        - Key: SWA:PID
          Value: !Ref SWAPID
        - Key: SWA:Confidentiality
          Value: !Ref SWAConfidentiality
        - Key: SWA:Compliance
          Value: !Ref SWACompliance
        - Key: SWA:BusinessService
          Value: !Ref SWABusinessService
        - Key: SWA:Environment
          Value: !Ref EnvName
  rVpcGatewayAttachment:
    Condition: cCreatePublicResources
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref rInternetGateway
      VpcId: !Ref rMainVPC

# Create Private subnets and routes or AZ1, AZ2 and/or AZ3 if requested
  rPrivateSubAz1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select ['0', !GetAZs '']
      CidrBlock: !Ref PrivateSubAz1
      MapPublicIpOnLaunch: false
      VpcId: !Ref rMainVPC
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref AppName, !Ref EnvName, 'priv', !Select ['0', !GetAZs ''], 'subnet']]
        - Key: SWA:Name
          Value: !Join ['-', [!Ref AppName, !Ref EnvName, 'priv', !Select ['0', !GetAZs ''], 'subnet']]
        - Key: SWA:SWACostCenter
          Value: !Ref SWACostCenter
        - Key: SWA:PID
          Value: !Ref SWAPID
        - Key: SWA:Confidentiality
          Value: !Ref SWAConfidentiality
        - Key: SWA:Compliance
          Value: !Ref SWACompliance
        - Key: SWA:BusinessService
          Value: !Ref SWABusinessService
        - Key: SWA:Environment
          Value: !Ref EnvName
  rPrivateSubAz2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select ['1', !GetAZs '']
      CidrBlock: !Ref PrivateSubAz2
      MapPublicIpOnLaunch: false
      VpcId: !Ref rMainVPC
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref AppName, !Ref EnvName, 'priv', !Select ['1', !GetAZs ''], 'subnet']]
        - Key: SWA:Name
          Value: !Join ['-', [!Ref AppName, !Ref EnvName, 'priv', !Select ['1', !GetAZs ''], 'subnet']]
        - Key: SWA:SWACostCenter
          Value: !Ref SWACostCenter
        - Key: SWA:PID
          Value: !Ref SWAPID
        - Key: SWA:Confidentiality
          Value: !Ref SWAConfidentiality
        - Key: SWA:Compliance
          Value: !Ref SWACompliance
        - Key: SWA:BusinessService
          Value: !Ref SWABusinessService
        - Key: SWA:Environment
          Value: !Ref EnvName
  rPrivateSubAz3:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select ['2', !GetAZs '']
      CidrBlock: !Ref PrivateSubAz3
      MapPublicIpOnLaunch: false
      VpcId: !Ref rMainVPC
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref AppName, !Ref EnvName, 'priv', !Select ['2', !GetAZs ''], 'subnet']]
        - Key: SWA:Name
          Value: !Join ['-', [!Ref AppName, !Ref EnvName, 'priv', !Select ['2', !GetAZs ''], 'subnet']]
        - Key: SWA:SWACostCenter
          Value: !Ref SWACostCenter
        - Key: SWA:PID
          Value: !Ref SWAPID
        - Key: SWA:Confidentiality
          Value: !Ref SWAConfidentiality
        - Key: SWA:Compliance
          Value: !Ref SWACompliance
        - Key: SWA:BusinessService
          Value: !Ref SWABusinessService
        - Key: SWA:Environment
          Value: !Ref EnvName
  rPrivateSubRtAz1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref rMainVPC
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref AppName, !Ref EnvName, 'priv', !Select ['0', !GetAZs ''], 'rt']]
        - Key: SWA:Name
          Value: !Join ['-', [!Ref AppName, !Ref EnvName, 'priv', !Select ['0', !GetAZs ''], 'rt']]
        - Key: SWA:SWACostCenter
          Value: !Ref SWACostCenter
        - Key: SWA:PID
          Value: !Ref SWAPID
        - Key: SWA:Confidentiality
          Value: !Ref SWAConfidentiality
        - Key: SWA:Compliance
          Value: !Ref SWACompliance
        - Key: SWA:BusinessService
          Value: !Ref SWABusinessService
        - Key: SWA:Environment
          Value: !Ref EnvName
  rPrivateSubRtAz2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref rMainVPC
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref AppName, !Ref EnvName, 'priv', !Select ['1', !GetAZs ''], 'rt']]
        - Key: SWA:Name
          Value: !Join ['-', [!Ref AppName, !Ref EnvName, 'priv', !Select ['1', !GetAZs ''], 'rt']]
        - Key: SWA:SWACostCenter
          Value: !Ref SWACostCenter
        - Key: SWA:PID
          Value: !Ref SWAPID
        - Key: SWA:Confidentiality
          Value: !Ref SWAConfidentiality
        - Key: SWA:Compliance
          Value: !Ref SWACompliance
        - Key: SWA:BusinessService
          Value: !Ref SWABusinessService
        - Key: SWA:Environment
          Value: !Ref EnvName
  rPrivateSubRtAz3:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref rMainVPC
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref AppName, !Ref EnvName, 'priv', !Select ['2', !GetAZs ''], 'rt']]
        - Key: SWA:Name
          Value: !Join ['-', [!Ref AppName, !Ref EnvName, 'priv', !Select ['2', !GetAZs ''], 'rt']]
        - Key: SWA:SWACostCenter
          Value: !Ref SWACostCenter
        - Key: SWA:PID
          Value: !Ref SWAPID
        - Key: SWA:Confidentiality
          Value: !Ref SWAConfidentiality
        - Key: SWA:Compliance
          Value: !Ref SWACompliance
        - Key: SWA:BusinessService
          Value: !Ref SWABusinessService
        - Key: SWA:Environment
          Value: !Ref EnvName
  rPrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref rPrivateSubRtAz1
      SubnetId: !Ref rPrivateSubAz1
  rPrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref rPrivateSubRtAz2
      SubnetId: !Ref rPrivateSubAz2
  rPrivateSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref rPrivateSubRtAz3
      SubnetId: !Ref rPrivateSubAz3

# Create Data subnets and routes or AZ1, AZ2 and/or AZ3 if requested
  rDataSubAz1:
    Condition: cCreateDataSub1
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select ['0', !GetAZs '']
      CidrBlock: !Ref DataSubAz1
      MapPublicIpOnLaunch: false
      VpcId: !Ref rMainVPC
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref AppName, !Ref EnvName, 'data', !Select ['0', !GetAZs ''], 'subnet']]
        - Key: SWA:Name
          Value: !Join ['-', [!Ref AppName, !Ref EnvName, 'data', !Select ['0', !GetAZs ''], 'subnet']]
        - Key: SWA:SWACostCenter
          Value: !Ref SWACostCenter
        - Key: SWA:PID
          Value: !Ref SWAPID
        - Key: SWA:Confidentiality
          Value: !Ref SWAConfidentiality
        - Key: SWA:Compliance
          Value: !Ref SWACompliance
        - Key: SWA:BusinessService
          Value: !Ref SWABusinessService
        - Key: SWA:Environment
          Value: !Ref EnvName
  rDataSubAz2:
    Condition: cCreateDataSub2
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select ['1', !GetAZs '']
      CidrBlock: !Ref DataSubAz2
      MapPublicIpOnLaunch: false
      VpcId: !Ref rMainVPC
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref AppName, !Ref EnvName, 'data', !Select ['1', !GetAZs ''], 'subnet']]
        - Key: SWA:Name
          Value: !Join ['-', [!Ref AppName, !Ref EnvName, 'data', !Select ['1', !GetAZs ''], 'subnet']]
        - Key: SWA:SWACostCenter
          Value: !Ref SWACostCenter
        - Key: SWA:PID
          Value: !Ref SWAPID
        - Key: SWA:Confidentiality
          Value: !Ref SWAConfidentiality
        - Key: SWA:Compliance
          Value: !Ref SWACompliance
        - Key: SWA:BusinessService
          Value: !Ref SWABusinessService
        - Key: SWA:Environment
          Value: !Ref EnvName
  rDataSubAz3:
    Condition: cCreateDataSub3
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select ['2', !GetAZs '']
      CidrBlock: !Ref DataSubAz3
      MapPublicIpOnLaunch: false
      VpcId: !Ref rMainVPC
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref AppName, !Ref EnvName, 'data', !Select ['2', !GetAZs ''], 'subnet']]
        - Key: SWA:Name
          Value: !Join ['-', [!Ref AppName, !Ref EnvName, 'data', !Select ['2', !GetAZs ''], 'subnet']]
        - Key: SWA:SWACostCenter
          Value: !Ref SWACostCenter
        - Key: SWA:PID
          Value: !Ref SWAPID
        - Key: SWA:Confidentiality
          Value: !Ref SWAConfidentiality
        - Key: SWA:Compliance
          Value: !Ref SWACompliance
        - Key: SWA:BusinessService
          Value: !Ref SWABusinessService
        - Key: SWA:Environment
          Value: !Ref EnvName
  rDataSubRt:
    Condition: cCreateDataResources
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref rMainVPC
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref AppName, !Ref EnvName, 'data', 'rt']]
        - Key: SWA:Name
          Value: !Join ['-', [!Ref AppName, !Ref EnvName, 'data', 'rt']]
        - Key: SWA:SWACostCenter
          Value: !Ref SWACostCenter
        - Key: SWA:PID
          Value: !Ref SWAPID
        - Key: SWA:Confidentiality
          Value: !Ref SWAConfidentiality
        - Key: SWA:Compliance
          Value: !Ref SWACompliance
        - Key: SWA:BusinessService
          Value: !Ref SWABusinessService
        - Key: SWA:Environment
          Value: !Ref EnvName
  rDataSubnet1RouteTableAssociation:
    Condition: cCreateDataSub1
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref rDataSubRt
      SubnetId: !Ref rDataSubAz1
  rDataSubnet2RouteTableAssociation:
    Condition: cCreateDataSub2
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref rDataSubRt
      SubnetId: !Ref rDataSubAz2
  rDataSubnet3RouteTableAssociation:
    Condition: cCreateDataSub3
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref rDataSubRt
      SubnetId: !Ref rDataSubAz3

# Create the Public tier default route (0.0.0.0/0) to internet gateway
  rPublicTierDefaultRoute:
    Condition: cCreatePublicResources
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref rPublicSubRt
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref rInternetGateway

# Create the Public tier routes (10.0.0.0/8, 172.16.0.0/12, 192.168.0.0/16) back to direct connect
  rPublicTierInternalAgg1Route:
    Condition: cVGWforPublic
    Type: AWS::EC2::Route
    DependsOn: rVirtualPrivateGatewayAttachment
    Properties:
      RouteTableId: !Ref rPublicSubRt
      DestinationCidrBlock: 10.0.0.0/8
      GatewayId: !Ref rVirtualPrivateGateway
  rPublicTierInternalAgg2Route:
    Condition: cVGWforPublic
    Type: AWS::EC2::Route
    DependsOn: rVirtualPrivateGatewayAttachment
    Properties:
      RouteTableId: !Ref rPublicSubRt
      DestinationCidrBlock: 172.16.0.0/12
      GatewayId: !Ref rVirtualPrivateGateway
  rPublicTierInternalAgg3Route:
    Condition: cVGWforPublic
    Type: AWS::EC2::Route
    DependsOn: rVirtualPrivateGatewayAttachment
    Properties:
      RouteTableId: !Ref rPublicSubRt
      DestinationCidrBlock: 192.168.0.0/16
      GatewayId: !Ref rVirtualPrivateGateway

# Create the Private tier default routes (0.0.0.0/0) from each AZ back to NAT gateways
  rPrivateTierDefaultRouteAZ1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref rPrivateSubRtAz1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref rNatGatewayAz1
  rPrivateTierDefaultRouteAZ2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref rPrivateSubRtAz2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref rNatGatewayAz2
  rPrivateTierDefaultRouteAZ3:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref rPrivateSubRtAz3
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref rNatGatewayAz3

# Create the Private tier routes (10.0.0.0/8, 172.16.0.0/12, 192.168.0.0/16) from each AZ back to direct connect
  rPrivateTierInternalAgg1RouteAZ1:
    Condition: cCreateVGW
    Type: AWS::EC2::Route
    DependsOn: rVirtualPrivateGatewayAttachment
    Properties:
      RouteTableId: !Ref rPrivateSubRtAz1
      DestinationCidrBlock: 10.0.0.0/8
      GatewayId: !Ref rVirtualPrivateGateway
  rPrivateTierInternalAgg2RouteAZ1:
    Condition: cCreateVGW
    Type: AWS::EC2::Route
    DependsOn: rVirtualPrivateGatewayAttachment
    Properties:
      RouteTableId: !Ref rPrivateSubRtAz1
      DestinationCidrBlock: 172.16.0.0/12
      GatewayId: !Ref rVirtualPrivateGateway
  rPrivateTierInternalAgg3RouteAZ1:
    Condition: cCreateVGW
    Type: AWS::EC2::Route
    DependsOn: rVirtualPrivateGatewayAttachment
    Properties:
      RouteTableId: !Ref rPrivateSubRtAz1
      DestinationCidrBlock: 192.168.0.0/16
      GatewayId: !Ref rVirtualPrivateGateway
  rPrivateTierInternalAgg1RouteAZ2:
    Condition: cCreateVGW
    Type: AWS::EC2::Route
    DependsOn: rVirtualPrivateGatewayAttachment
    Properties:
      RouteTableId: !Ref rPrivateSubRtAz2
      DestinationCidrBlock: 10.0.0.0/8
      GatewayId: !Ref rVirtualPrivateGateway
  rPrivateTierInternalAgg2RouteAZ2:
    Condition: cCreateVGW
    Type: AWS::EC2::Route
    DependsOn: rVirtualPrivateGatewayAttachment
    Properties:
      RouteTableId: !Ref rPrivateSubRtAz2
      DestinationCidrBlock: 172.16.0.0/12
      GatewayId: !Ref rVirtualPrivateGateway
  rPrivateTierInternalAgg3RouteAZ2:
    Condition: cCreateVGW
    Type: AWS::EC2::Route
    DependsOn: rVirtualPrivateGatewayAttachment
    Properties:
      RouteTableId: !Ref rPrivateSubRtAz2
      DestinationCidrBlock: 192.168.0.0/16
      GatewayId: !Ref rVirtualPrivateGateway
  rPrivateTierInternalAgg1RouteAZ3:
    Condition: cCreateVGW
    Type: AWS::EC2::Route
    DependsOn: rVirtualPrivateGatewayAttachment
    Properties:
      RouteTableId: !Ref rPrivateSubRtAz3
      DestinationCidrBlock: 10.0.0.0/8
      GatewayId: !Ref rVirtualPrivateGateway
  rPrivateTierInternalAgg2RouteAZ3:
    Condition: cCreateVGW
    Type: AWS::EC2::Route
    DependsOn: rVirtualPrivateGatewayAttachment
    Properties:
      RouteTableId: !Ref rPrivateSubRtAz3
      DestinationCidrBlock: 172.16.0.0/12
      GatewayId: !Ref rVirtualPrivateGateway
  rPrivateTierInternalAgg3RouteAZ3:
    Condition: cCreateVGW
    Type: AWS::EC2::Route
    DependsOn: rVirtualPrivateGatewayAttachment
    Properties:
      RouteTableId: !Ref rPrivateSubRtAz3
      DestinationCidrBlock: 192.168.0.0/16
      GatewayId: !Ref rVirtualPrivateGateway

# Create the Data tier routes (10.0.0.0/8, 172.16.0.0/12, 192.168.0.0/16) from each AZ back to direct connect
  rDataTierInternalAgg1Route:
    Condition: cVGWforData
    Type: AWS::EC2::Route
    DependsOn: rVirtualPrivateGatewayAttachment
    Properties:
      RouteTableId: !Ref rDataSubRt
      DestinationCidrBlock: 10.0.0.0/8
      GatewayId: !Ref rVirtualPrivateGateway
  rDataTierInternalAgg2Route:
    Condition: cVGWforData
    Type: AWS::EC2::Route
    DependsOn: rVirtualPrivateGatewayAttachment
    Properties:
      RouteTableId: !Ref rDataSubRt
      DestinationCidrBlock: 172.16.0.0/12
      GatewayId: !Ref rVirtualPrivateGateway
  rDataTierInternalAgg3Route:
    Condition: cVGWforData
    Type: AWS::EC2::Route
    DependsOn: rVirtualPrivateGatewayAttachment
    Properties:
      RouteTableId: !Ref rDataSubRt
      DestinationCidrBlock: 192.168.0.0/16
      GatewayId: !Ref rVirtualPrivateGateway

# Create NACLs for Public subnets
  rPublicTierSubnetsNacl:
    Condition: cCreatePublicResources
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref rMainVPC
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref AppName, !Ref EnvName, !Ref 'AWS::Region', 'pub', 'nacl']]
        - Key: SWA:Name
          Value: !Join ['-', [!Ref AppName, !Ref EnvName, !Ref 'AWS::Region', 'pub', 'nacl']]
        - Key: SWA:SWACostCenter
          Value: !Ref SWACostCenter
        - Key: SWA:PID
          Value: !Ref SWAPID
        - Key: SWA:Confidentiality
          Value: !Ref SWAConfidentiality
        - Key: SWA:Compliance
          Value: !Ref SWACompliance
        - Key: SWA:BusinessService
          Value: !Ref SWABusinessService
        - Key: SWA:Environment
          Value: !Ref EnvName
  rPublicTierSubnetsNaclIn:
    Condition: cCreatePublicResources
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref rPublicTierSubnetsNacl
      RuleNumber: '100'
      Protocol: '-1'
      RuleAction: 'allow'
      CidrBlock: '0.0.0.0/0'
      PortRange:
        From: '-1'
        To: '-1'
  rPublicTierSubnetsNaclOut:
    Condition: cCreatePublicResources
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref rPublicTierSubnetsNacl
      RuleNumber: '100'
      Protocol: '-1'
      RuleAction: 'allow'
      Egress: 'true'
      CidrBlock: '0.0.0.0/0'
      PortRange:
        From: '-1'
        To: '-1'
  rNaclAssocPubSubnet1:
    Condition: cCreatePublicSub1
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref rPublicTierSubnetsNacl
      SubnetId: !Ref rPublicSubAz1
  rNaclAssocPubSubnet2:
    Condition: cCreatePublicSub2
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref rPublicTierSubnetsNacl
      SubnetId: !Ref rPublicSubAz2
  rNaclAssocPubSubnet3:
    Condition: cCreatePublicSub3
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref rPublicTierSubnetsNacl
      SubnetId: !Ref rPublicSubAz3

# Create NACLs for Private subnets
  rPrivateTierSubnetsNacl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref rMainVPC
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref AppName, !Ref EnvName, !Ref 'AWS::Region', 'priv', 'nacl']]
        - Key: SWA:Name
          Value: !Join ['-', [!Ref AppName, !Ref EnvName, !Ref 'AWS::Region', 'priv', 'nacl']]
        - Key: SWA:SWACostCenter
          Value: !Ref SWACostCenter
        - Key: SWA:PID
          Value: !Ref SWAPID
        - Key: SWA:Confidentiality
          Value: !Ref SWAConfidentiality
        - Key: SWA:Compliance
          Value: !Ref SWACompliance
        - Key: SWA:BusinessService
          Value: !Ref SWABusinessService
        - Key: SWA:Environment
          Value: !Ref EnvName
  rPrivateTierSubnetsNaclIn:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref rPrivateTierSubnetsNacl
      RuleNumber: '100'
      Protocol: '-1'
      RuleAction: 'allow'
      Egress: 'false'
      CidrBlock: '0.0.0.0/0'
      PortRange:
        From: '-1'
        To: '-1'
  rPrivateTierSubnetsNaclOut:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref rPrivateTierSubnetsNacl
      RuleNumber: '100'
      Protocol: '-1'
      RuleAction: 'allow'
      Egress: 'true'
      CidrBlock: '0.0.0.0/0'
      PortRange:
        From: '-1'
        To: '-1'
  rNaclAssocPrivateSubnet1:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref rPrivateTierSubnetsNacl
      SubnetId: !Ref rPrivateSubAz1
  rNaclAssocPrivateSubnet2:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref rPrivateTierSubnetsNacl
      SubnetId: !Ref rPrivateSubAz2
  rNaclAssocPrivateSubnet3:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref rPrivateTierSubnetsNacl
      SubnetId: !Ref rPrivateSubAz3

# Create NACLs for Data subnets
  rDataTierSubnetsNacl:
    Condition: cCreateDataResources
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref rMainVPC
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref AppName, !Ref EnvName, !Ref 'AWS::Region', 'data', 'nacl']]
        - Key: SWA:Name
          Value: !Join ['-', [!Ref AppName, !Ref EnvName, !Ref 'AWS::Region', 'data', 'nacl']]
        - Key: SWA:SWACostCenter
          Value: !Ref SWACostCenter
        - Key: SWA:PID
          Value: !Ref SWAPID
        - Key: SWA:Confidentiality
          Value: !Ref SWAConfidentiality
        - Key: SWA:Compliance
          Value: !Ref SWACompliance
        - Key: SWA:BusinessService
          Value: !Ref SWABusinessService
        - Key: SWA:Environment
          Value: !Ref EnvName
  rDataTierSubnetsNaclIn:
    Condition: cCreateDataResources
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref rDataTierSubnetsNacl
      RuleNumber: '100'
      Protocol: '-1'
      RuleAction: 'allow'
      Egress: 'false'
      CidrBlock: '0.0.0.0/0'
      PortRange:
        From: '-1'
        To: '-1'
  rDataTierSubnetsNaclOut:
    Condition: cCreateDataResources
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref rDataTierSubnetsNacl
      RuleNumber: '100'
      Protocol: '-1'
      RuleAction: 'allow'
      Egress: 'true'
      CidrBlock: '0.0.0.0/0'
      PortRange:
        From: '-1'
        To: '-1'
  rNaclAssocDataSubnet1:
    Condition: cCreateDataSub1
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref rDataTierSubnetsNacl
      SubnetId: !Ref rDataSubAz1
  rNaclAssocDataSubnet2:
    Condition: cCreateDataSub2
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref rDataTierSubnetsNacl
      SubnetId: !Ref rDataSubAz2
  rNaclAssocDataSubnet3:
    Condition: cCreateDataSub3
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref rDataTierSubnetsNacl
      SubnetId: !Ref rDataSubAz3


Outputs:
  VpcId:
    Description: 'The VPC ID of this VPC'
    Value: !Ref rMainVPC
    Export:
      Name: !Sub '${AWS::StackName}-VpcId'
  VpcCidrBlock:
    Description: 'VPC CIDR Block'
    Value: !Ref VpcCidrBlock
    Export:
      Name: !Sub '${AWS::StackName}-VpcCidrBlock'
  PublicSubnet1Id:
    Condition: cCreatePublicSub1
    Description: 'The ID of Public Subnet AZ 1'
    Value: !Ref rPublicSubAz1
    Export:
      Name: !Sub '${AWS::StackName}-PubSub1Id'
  PublicSubnet2Id:
    Condition: cCreatePublicSub2
    Description: 'Public Subnet 2 ID'
    Value: !Ref rPublicSubAz2
    Export:
      Name: !Sub '${AWS::StackName}-PubSub2Id'
  PublicSubnet3Id:
    Condition: cCreatePublicSub3
    Description: 'Public Subnet 3 ID'
    Value: !Ref rPublicSubAz3
    Export:
      Name: !Sub '${AWS::StackName}-PubSub3Id'
  PublicSubnetsRouteTable:
    Condition: cCreatePublicResources
    Description: 'Public Subnet Route Table ID'
    Value: !Ref rPublicSubRt
    Export:
      Name: !Sub '${AWS::StackName}-PubRTId'
  PrivateSubnet1Id:
    Description: 'Private Subnet 1 ID'
    Value: !Ref rPrivateSubAz1
    Export:
      Name: !Sub '${AWS::StackName}-PrivateSub1Id'
  PrivateSubnet2Id:
    Description: 'Private Subnet 2 ID'
    Value: !Ref rPrivateSubAz2
    Export:
      Name: !Sub '${AWS::StackName}-PrivateSub2Id'
  PrivateSubnet3Id:
    Description: 'Private Subnet 3 ID'
    Value: !Ref rPrivateSubAz3
    Export:
      Name: !Sub '${AWS::StackName}-PrivateSub3Id'
  PrivateSubnetRouteTableAZ1:
    Description: 'Private Subnet Route Table ID of AZ 1'
    Value: !Ref rPrivateSubRtAz1
    Export:
      Name: !Sub '${AWS::StackName}-PrivRT1Id'
  PrivateSubnetRouteTableAZ2:
    Description: 'Private Subnet Route Table ID of AZ 2'
    Value: !Ref rPrivateSubRtAz2
    Export:
      Name: !Sub '${AWS::StackName}-PrivRT2Id'
  PrivateSubnetRouteTableAZ3:
    Description: 'Private Subnet Route Table ID of AZ 3'
    Value: !Ref rPrivateSubRtAz3
    Export:
      Name: !Sub '${AWS::StackName}-PrivRT3Id'
  DataSubnet1Id:
    Condition: cCreateDataSub1
    Description: 'Data Subnet 1 ID'
    Value: !Ref rDataSubAz1
    Export:
      Name: !Sub '${AWS::StackName}-DataSub1Id'
  DataSubnet2Id:
    Condition: cCreateDataSub2
    Description: 'Data Subnet 2 ID'
    Value: !Ref rDataSubAz2
    Export:
      Name: !Sub '${AWS::StackName}-DataSub2Id'
  DataSubnet3Id:
    Condition: cCreateDataSub3
    Description: 'Data Subnet 3 ID'
    Value: !Ref rDataSubAz3
    Export:
      Name: !Sub '${AWS::StackName}-DataSub3Id'
  DataSubnetRouteTableAZ:
    Condition: cCreateDataResources
    Description: 'Data Subnet Route Table ID'
    Value: !Ref rDataSubRt
    Export:
      Name: !Sub '${AWS::StackName}-DataRtId'